{
    "call_graph": {
        "134519120": [
            134518272,
            134518912,
            134519040,
            134518528,
            134517632,
            134536720,
            134518928,
            134522128,
            134518672,
            134537759,
            134517792,
            134518176,
            134521125,
            134517552,
            134529203,
            134518336,
            134517824,
            134518976,
            134521924,
            134517840,
            134517968,
            134518608,
            134518224,
            134532049,
            134518624,
            134518112,
            134517600,
            134526950,
            134533742,
            134517872,
            134518896,
            134519024,
            134518512,
            134518128,
            134517616
        ],
        "134520840": [
            134518560
        ],
        "134520874": [],
        "134520878": [],
        "134520972": [
            134520878
        ],
        "134521071": [],
        "134521125": [
            134519104,
            134518656,
            134517696,
            134532588,
            134533742,
            134519024,
            134518384,
            134518608,
            134529203
        ],
        "134521672": [
            134526088,
            134518720
        ],
        "134521859": [
            134519056
        ],
        "134521901": [
            134518848
        ],
        "134521924": [
            134518288,
            134517760
        ],
        "134522128": [
            134518144,
            134518240,
            134517792,
            134518496,
            134518176,
            134518016,
            134518800,
            134517936,
            134518288,
            134517712,
            134518128,
            134519056
        ],
        "134522553": [],
        "134522634": [],
        "134522666": [],
        "134522716": [],
        "134522743": [
            134518848
        ],
        "134522811": [],
        "134522864": [],
        "134522884": [
            134518848
        ],
        "134522926": [
            134518816,
            134522634,
            134522864,
            134526456
        ],
        "134523164": [
            134517888,
            134522666,
            134518848,
            134526899
        ],
        "134523321": [
            134518816,
            134526668,
            134522926,
            134526873,
            134523164
        ],
        "134523421": [
            134518848,
            134523321
        ],
        "134523476": [
            134517888,
            134518080,
            134518320,
            134518640,
            134518480,
            134518704,
            134523421
        ],
        "134523924": [
            134518592,
            134518320,
            134518640,
            134517920
        ],
        "134524286": [
            134523924
        ],
        "134524304": [
            134522634,
            134523924,
            134523164,
            134523421,
            134518816,
            134517920,
            134522926,
            134518320,
            134518192,
            134518704,
            134518448,
            134523321,
            134522553,
            134518080,
            134527558,
            134532079,
            134522864,
            134519024,
            134518640,
            134527605
        ],
        "134525705": [
            134518592,
            134524304,
            134523476,
            134523421,
            134524286
        ],
        "134525841": [
            134525705
        ],
        "134525854": [
            134517856,
            134519072,
            134522666,
            134521901,
            134518192,
            134519056,
            134517776
        ],
        "134526075": [
            134525854
        ],
        "134526088": [
            134518944,
            134518848,
            134519088,
            134518128,
            134518096,
            134522811
        ],
        "134526382": [
            134517728,
            134519056,
            134521859
        ],
        "134526456": [],
        "134526522": [
            134526456,
            134518544,
            134518816,
            134518848
        ],
        "134526668": [
            134518848,
            134518816,
            134518544,
            134518864,
            134517904,
            134526456
        ],
        "134526873": [
            134526668
        ],
        "134526899": [
            134526456,
            134518816
        ],
        "134526950": [],
        "134527130": [],
        "134527297": [],
        "134527462": [
            134518384
        ],
        "134527558": [
            134519024
        ],
        "134527605": [],
        "134527679": [],
        "134527711": [],
        "134527795": [],
        "134527822": [
            134522926
        ],
        "134527849": [
            134519056
        ],
        "134527870": [
            134518880,
            134518784
        ],
        "134527936": [
            134518448
        ],
        "134528037": [
            134518912,
            134526522,
            134518352,
            134523164
        ],
        "134528148": [
            134517680
        ],
        "134528199": [
            134527679
        ],
        "134528219": [
            134527679
        ],
        "134528271": [
            134518304,
            134517552,
            134518128,
            134527795,
            134528219
        ],
        "134528765": [
            134517664
        ],
        "134528822": [
            134528219,
            134523924
        ],
        "134528959": [
            134519072,
            134528822
        ],
        "134529021": [
            134518816,
            134518688,
            134518832,
            134518992,
            134528765
        ],
        "134529203": [
            134518128
        ],
        "134529251": [
            134518816,
            134517664,
            134526950,
            134522926,
            134517648,
            134517552,
            134517968,
            134519024,
            134518384,
            134526456,
            134523164
        ],
        "134530291": [
            134529251,
            134532876,
            134528271,
            134518032,
            134527679,
            134530487,
            134527711
        ],
        "134530487": [
            134518672,
            134519056,
            134517648,
            134526873,
            134523164,
            134518816,
            134519072,
            134528037,
            134522926,
            134518704,
            134517552,
            134518832,
            134523321,
            134527936,
            134517568,
            134528199,
            134527822,
            134518992,
            134529021,
            134530291,
            134528765,
            134527870
        ],
        "134532049": [],
        "134532079": [
            134517888,
            134538049,
            134518464,
            134527462,
            134528271,
            134517552,
            134518224,
            134527679,
            134530291,
            134523321,
            134527711
        ],
        "134532588": [
            134518304,
            134518368,
            134518736,
            134518384,
            134517552
        ],
        "134532876": [
            134518816,
            134527297,
            134522926,
            134518000,
            134519024,
            134518704,
            134518512,
            134526873,
            134523164
        ],
        "134533274": [
            134517984,
            134518272,
            134517632,
            134518912,
            134518432,
            134517600,
            134517744,
            134535666
        ],
        "134533463": [
            134518704,
            134527462
        ],
        "134533617": [
            134518912,
            134523321,
            134517632,
            134536111
        ],
        "134533742": [
            134518304,
            134517552
        ],
        "134533863": [
            134518848
        ],
        "134533898": [
            134518848
        ],
        "134533936": [
            134518592,
            134518848,
            134518640
        ],
        "134534012": [
            134518848,
            134518592,
            134518752,
            134527558,
            134518640,
            134519024,
            134533936,
            134526522
        ],
        "134534400": [
            134518208,
            134517856,
            134519008,
            134519056,
            134518192
        ],
        "134534511": [],
        "134534559": [
            134534511
        ],
        "134534635": [
            134518208,
            134518848
        ],
        "134534684": [
            134518944,
            134518416
        ],
        "134534784": [],
        "134534816": [
            134519056
        ],
        "134534867": [
            134534635
        ],
        "134534896": [
            134523924
        ],
        "134534912": [
            134518976,
            134518080,
            134517664,
            134518704,
            134519024
        ],
        "134535089": [
            134517760,
            134518160,
            134518912,
            134518720
        ],
        "134535215": [
            134523321,
            134523164
        ],
        "134535274": [
            134518752
        ],
        "134535328": [
            134518720,
            134519056
        ],
        "134535390": [
            134518192,
            134517776,
            134534400,
            134535328
        ],
        "134535455": [
            134518816,
            134518192,
            134534784,
            134522926
        ],
        "134535666": [
            134534784,
            134518032,
            134517664,
            134518960
        ],
        "134536111": [
            134517888,
            134518528,
            134518048,
            134518848,
            134526382,
            134517840,
            134519056,
            134518928,
            134534684
        ],
        "134536580": [
            134518400,
            134518576,
            134517584,
            134518176
        ],
        "134536720": [],
        "134536756": [],
        "134536788": [
            134536756
        ],
        "134536802": [],
        "134536819": [
            134518704,
            134535666,
            134529251
        ],
        "134536928": [
            134518704
        ],
        "134537012": [
            134536756
        ],
        "134537041": [
            134518816,
            134522926,
            134518768,
            134536756,
            134537012,
            134536788,
            134526456,
            134523164
        ],
        "134537268": [
            134518064,
            134537012,
            134536756
        ],
        "134537325": [
            134517888,
            134518080,
            134517808,
            134518768,
            134537012,
            134536756,
            134536788
        ],
        "134537629": [
            134518080,
            134518768,
            134536756,
            134537012,
            134536788
        ],
        "134537759": [
            134517536,
            134519072,
            134517888,
            134517952,
            134518032,
            134518128,
            134537268
        ],
        "134538049": [
            134517888,
            134518256
        ],
        "134538194": []
    },
    "pseudocode": {
        "134519120": [
            "sub_8049950",
            "0x8049950",
            "int __cdecl sub_8049950(int a1, char *const *a2)\n{\n  char *const *v2; // esi\n  int v3; // eax\n  char *v4; // ebx\n  char *v5; // eax\n  char *v6; // edx\n  unsigned int v7; // ecx\n  unsigned int v8; // ecx\n  bool v9; // cf\n  int *v10; // eax\n  char *v11; // eax\n  unsigned int j; // ecx\n  _DWORD *v13; // ebx\n  char *v14; // eax\n  char *v15; // eax\n  int v16; // eax\n  char *v17; // ebx\n  char *v18; // eax\n  void *v19; // esp\n  int i; // eax\n  char v21; // cl\n  char *v23; // eax\n  const char *v24; // ebx\n  const char *v25; // esi\n  char *v26; // edi\n  __pid_t v27; // eax\n  int v28; // eax\n  int v29; // eax\n  int v30; // ebx\n  char v31; // [esp-4h] [ebp-28h] BYREF\n  int argc; // [esp+0h] [ebp-24h]\n  int v33; // [esp+4h] [ebp-20h]\n  char v34; // [esp+Bh] [ebp-19h]\n  int *v35; // [esp+14h] [ebp-10h]\n\n  v35 = &a1;\n  v2 = a2;\n  argc = a1;\n  sub_804CBD1(&unk_8053228);\n  dword_80533D0 = 60;\n  dword_80533B4 = 30;\n  dword_80533CC = 20;\n  dword_80533C4 = 3;\n  dword_80533C8 = 100;\n  dword_8053384 = (int)\"Protected Area\";\n  dword_8053390 = \"/cgi-bin\";\n  value = \"/sbin:/usr/sbin:/bin:/usr/bin\";\n  dword_80533E4 = (int)&dword_80533E0;\n  dword_80533E0 = (int)&dword_80533E0;\n  signal(13, (__sighandler_t)1);\n  v33 = 0;\n  v34 = 0;\n  while ( 1 )\n  {\n    v3 = getopt(argc, v2, \"A:aC:c:Dd:E:fh:H:I:i:K:k:L:l:m:N:n:p:qRr:Ss:T:t:U:u:Xx:y:\");\n    if ( v3 == -1 )\n      break;\n    switch ( v3 )\n    {\n      case 'A':\n        dword_80533C0 = atoi(optarg);\n        continue;\n      case 'C':\n      case 'K':\n      case 'q':\n      case 's':\n        fprintf(stderr, \"uhttpd: TLS support not compiled, ignoring -%c\\n\", v3);\n        continue;\n      case 'D':\n        dword_80533B0 = 1;\n        continue;\n      case 'E':\n        if ( *optarg != 47 )\n        {\n          fprintf(stderr, \"Error: Invalid error handler: %s\\n\", optarg);\n          goto LABEL_16;\n        }\n        dword_805338C = optarg;\n        continue;\n      case 'H':\n        if ( !sub_804E21F(optarg) )\n          continue;\n        fprintf(stderr, \"Error: Failed to load handler script %s\\n\", optarg);\n        goto LABEL_16;\n      case 'I':\n        if ( *optarg == 47 )\n        {\n          fprintf(stderr, \"Error: Invalid index page: %s\\n\", optarg);\n          goto LABEL_16;\n        }\n        sub_804C0B3(optarg);\n        continue;\n      case 'L':\n      case 'l':\n        fprintf(stderr, \"uhttpd: Lua support not compiled, ignoring -%c\\n\", v3);\n        continue;\n      case 'N':\n        dword_80533C8 = atoi(optarg);\n        continue;\n      case 'R':\n        dword_80533B8 = 1;\n        continue;\n      case 'S':\n        dword_80533AC = 1;\n        continue;\n      case 'T':\n        dword_80533B4 = atoi(optarg);\n        continue;\n      case 'U':\n      case 'X':\n      case 'a':\n      case 'u':\n        fprintf(stderr, \"uhttpd: UBUS support not compiled, ignoring -%c\\n\", v3);\n        continue;\n      case 'c':\n        dword_8053388 = (int)optarg;\n        continue;\n      case 'd':\n        optarg = strdup(optarg);\n        v19 = alloca(strlen(optarg) + 16);\n        for ( i = 0; ; ++i )\n        {\n          v21 = optarg[i];\n          if ( !v21 )\n            break;\n          if ( v21 == 43 )\n            optarg[i] = 32;\n        }\n        if ( (int)sub_804B7E6(&v31, i, optarg, i) < 0 )\n        {\n          fputs(\"uhttpd: invalid encoding\\n\", stderr);\n          return -1;\n        }\n        printf(\"%s\", &v31);\n        return 0;\n      case 'f':\n        v34 = 1;\n        continue;\n      case 'h':\n        if ( !realpath(optarg, dest) )\n        {\n          v10 = __errno_location();\n          v11 = strerror(*v10);\n          fprintf(stderr, \"Error: Invalid directory %s: %s\\n\", optarg, v11);\n          exit(1);\n        }\n        src = strdup(dest);\n        continue;\n      case 'i':\n        v17 = strdup(optarg);\n        optarg = v17;\n        v18 = strchr(v17, 61);\n        if ( *v17 != 46 || !v18 )\n        {\n          fprintf(stderr, \"Error: Invalid interpreter: %s\\n\", v17);\n          goto LABEL_16;\n        }\n        *v18 = 0;\n        sub_804D26E(v17, v18 + 1);\n        break;\n      case 'k':\n        dword_80533CC = atoi(optarg);\n        continue;\n      case 'm':\n        v23 = crypt(optarg, \"$1$\");\n        puts(v23);\n        return 0;\n      case 'n':\n        dword_80533C4 = atoi(optarg);\n        continue;\n      case 'p':\n        v4 = strdup(optarg);\n        optarg = v4;\n        v5 = strrchr(v4, 58);\n        if ( v5 )\n        {\n          *v5 = 0;\n          v6 = v5 + 1;\n          if ( *v4 == 91 )\n          {\n            v7 = strlen(v4) + 1;\n            v9 = v7 == 1;\n            v8 = v7 - 1;\n            if ( !v9 && v8 != 1 )\n            {\n              v4[v8 - 1] = 0;\n              ++v4;\n            }\n          }\n        }\n        else\n        {\n          v6 = v4;\n          v4 = 0;\n        }\n        v33 += sub_804A510(v4, v6, 0);\n        continue;\n      case 'r':\n        dword_8053384 = (int)optarg;\n        continue;\n      case 't':\n        dword_80533D0 = atoi(optarg);\n        continue;\n      case 'x':\n        if ( optarg && *optarg )\n        {\n          for ( j = strlen(optarg) - 1; j != -1 && optarg[j] == 47; --j )\n            ;\n          optarg[j + 1] = 0;\n        }\n        dword_8053390 = optarg;\n        continue;\n      case 'y':\n        v13 = calloc(1u, 0x10u);\n        if ( !v13 )\n        {\n          fputs(\"Error: failed to allocate alias\\n\", stderr);\n          goto LABEL_16;\n        }\n        v14 = strdup(optarg);\n        v13[2] = v14;\n        v15 = strchr(v14, 61);\n        if ( v15 )\n        {\n          *v15 = 0;\n          v13[3] = v15 + 1;\n        }\n        else\n        {\n          v13[3] = 0;\n        }\n        v16 = dword_80533E0;\n        *(_DWORD *)(dword_80533E0 + 4) = v13;\n        *v13 = v16;\n        v13[1] = &dword_80533E0;\n        dword_80533E0 = (int)v13;\n        continue;\n      default:\n        fprintf(\n          stderr,\n          \"Usage: %s -p [addr:]port -h docroot\\n\"\n          \"\\t-f              Do not fork to background\\n\"\n          \"\\t-c file         Configuration file, default is '/etc/httpd.conf'\\n\"\n          \"\\t-p [addr:]port  Bind to specified address and port, multiple allowed\\n\"\n          \"\\t-h directory    Specify the document root, default is '.'\\n\"\n          \"\\t-E string       Use given virtual URL as 404 error handler\\n\"\n          \"\\t-I string       Use given filename as index for directories, multiple allowed\\n\"\n          \"\\t-S              Do not follow symbolic links outside of the docroot\\n\"\n          \"\\t-D              Do not allow directory listings, send 403 instead\\n\"\n          \"\\t-R              Enable RFC1918 filter\\n\"\n          \"\\t-n count        Maximum allowed number of concurrent script requests\\n\"\n          \"\\t-N count        Maximum allowed number of concurrent connections\\n\"\n          \"\\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\\n\"\n          \"\\t-y alias[=path]\\tURL alias handle\\n\"\n          \"\\t-i .ext=path    Use interpreter at path for files with the given extension\\n\"\n          \"\\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\\n\"\n          \"\\t-T seconds      Network timeout in seconds, default is 30\\n\"\n          \"\\t-k seconds      HTTP keepalive timeout\\n\"\n          \"\\t-d string       URL decode given string\\n\"\n          \"\\t-r string       Specify basic auth realm\\n\"\n          \"\\t-m string       MD5 crypt given string\\n\"\n          \"\\n\",\n          *(const char **)v2);\n        return 1;\n    }\n  }\n  sub_804A125();\n  if ( !src )\n  {\n    if ( !realpath(\".\", dest) )\n    {\n      fputs(\"Error: Unable to determine work dir\\n\", stderr);\n      return 1;\n    }\n    src = strdup(dest);\n  }\n  sub_804C0B3(\"index.html\");\n  sub_804C0B3(\"index.htm\");\n  sub_804C0B3(\"default.html\");\n  sub_804C0B3(\"default.htm\");\n  v24 = dword_8053390;\n  if ( dword_8053390 )\n  {\n    v25 = src;\n    v26 = (char *)malloc(strlen(src) + 1 + strlen(dword_8053390));\n    strcpy(v26, v25);\n    strcat(v26, v24);\n    dword_8053394 = (int)v26;\n    dword_80533DC = strlen(v24);\n  }\n  if ( !v33 )\n  {\n    fputs(\"Error: No sockets bound, unable to continue\\n\", stderr);\n    return 1;\n  }\n  if ( !v34 )\n  {\n    v27 = fork();\n    if ( v27 == -1 )\n    {\n      perror(\"fork()\");\nLABEL_16:\n      exit(1);\n    }\n    if ( v27 )\n      exit(0);\n    v28 = chdir(\"/\");\n    if ( v28 )\n      perror(\"chdir()\");\n    v29 = open64(\"/dev/null\", 1, v28, v28);\n    v30 = v29;\n    if ( v29 > 0 )\n    {\n      dup2(v29, 0);\n      dup2(v30, 1);\n      dup2(v30, 2);\n    }\n  }\n  uloop_init();\n  sub_804A444();\n  sub_804DE10();\n  uloop_run();\n  return 0;\n}\n"
        ],
        "134520840": [
            "start",
            "0x804a008",
            "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(int a1@<eax>, int a2@<edx>)\n{\n  int v2; // esi\n  int v3; // [esp-4h] [ebp-4h] BYREF\n  void *retaddr; // [esp+0h] [ebp+0h] BYREF\n\n  v2 = v3;\n  v3 = a1;\n  ((void (__stdcall *)(int (__cdecl *)(int, char *const *), int, void **, int (*)(), int (*)(), int, int *))__uClibc_main)(\n    sub_8049950,\n    v2,\n    &retaddr,\n    init_proc,\n    term_proc,\n    a2,\n    &v3);\n  __halt();\n}\n"
        ],
        "134520874": [
            "sub_804A02A",
            "0x804a02a",
            "void sub_804A02A()\n{\n  ;\n}\n"
        ],
        "134520878": [
            "sub_804A02E",
            "0x804a02e",
            "void *sub_804A02E()\n{\n  return &edata;\n}\n"
        ],
        "134520972": [
            "sub_804A08C",
            "0x804a08c",
            "int sub_804A08C()\n{\n  int result; // eax\n\n  if ( !byte_8053354 )\n  {\n    while ( dword_8053358 < (unsigned int)(&dword_8052F2C - dword_8052F28 - 1) )\n      ((void (*)(void))dword_8052F28[++dword_8053358])();\n    sub_804A02E();\n    result = 0;\n    byte_8053354 = 1;\n  }\n  return result;\n}\n"
        ],
        "134521071": [
            "sub_804A0EF",
            "0x804a0ef",
            "__int64 sub_804A0EF()\n{\n  return 0LL;\n}\n"
        ],
        "134521125": [
            "sub_804A125",
            "0x804a125",
            "int __fastcall sub_804A125(int a1, int a2)\n{\n  const char *v2; // eax\n  int result; // eax\n  FILE *v4; // esi\n  char *v5; // eax\n  char *v6; // edi\n  char *v7; // eax\n  char *v8; // eax\n  char *v9; // eax\n  const char *v10; // edi\n  char *v11; // eax\n  char *v12; // eax\n  char *v13; // eax\n  const char *v14; // edi\n  char *v15; // eax\n  char *v16; // eax\n  char *v17; // edi\n  char *v18; // eax\n  char *v19; // eax\n  char s1; // [esp+Ch] [ebp-21Ch]\n  char *s1a; // [esp+Ch] [ebp-21Ch]\n  char *s1b; // [esp+Ch] [ebp-21Ch]\n  char s[536]; // [esp+10h] [ebp-218h] BYREF\n\n  v2 = (const char *)dword_8053388;\n  if ( !dword_8053388 )\n    v2 = \"/etc/httpd.conf\";\n  result = fopen64(v2, \"r\", a2, a2);\n  v4 = (FILE *)result;\n  if ( result )\n  {\n    memset(s, 0, 0x200u);\n    while ( fgets(s, 511, v4) )\n    {\n      s1 = s[0];\n      if ( s[0] == 47 && (v5 = strchr(s, 58)) != 0 )\n      {\n        *v5 = 0;\n        v6 = v5 + 1;\n        v7 = strchr(v5 + 1, 58);\n        if ( v7 )\n        {\n          *v7 = 0;\n          s1a = v7 + 1;\n          v8 = strchr(v7 + 1, 10);\n          if ( v8 )\n          {\n            *v8 = 0;\n            sub_804CDEC(s, v6, s1a);\n          }\n        }\n      }\n      else if ( !strncmp(s, \"I:\", 2u) )\n      {\n        v9 = strchr(s, 58);\n        if ( v9 )\n        {\n          *v9 = 0;\n          v10 = v9 + 1;\n          v11 = strchr(v9 + 1, 10);\n          if ( v11 )\n          {\n            *v11 = 0;\n            v12 = strdup(v10);\n            sub_804C0B3(v12);\n          }\n        }\n      }\n      else if ( !strncmp(s, \"E404:\", 5u) )\n      {\n        v13 = strchr(s, 58);\n        if ( v13 )\n        {\n          *v13 = 0;\n          v14 = v13 + 1;\n          v15 = strchr(v13 + 1, 10);\n          if ( v15 )\n          {\n            *v15 = 0;\n            dword_805338C = strdup(v14);\n          }\n        }\n      }\n      else if ( s1 == 42 )\n      {\n        if ( strchr(s, 58) )\n        {\n          v16 = strchr(s, 42);\n          if ( v16 )\n          {\n            *v16 = 0;\n            v17 = v16 + 1;\n            v18 = strchr(v16 + 1, 58);\n            if ( v18 )\n            {\n              *v18 = 0;\n              s1b = v18 + 1;\n              v19 = strchr(v18 + 1, 10);\n              if ( v19 )\n              {\n                *v19 = 0;\n                sub_804D26E(v17, s1b);\n              }\n            }\n          }\n        }\n      }\n    }\n    return fclose(v4);\n  }\n  return result;\n}\n"
        ],
        "134521672": [
            "sub_804A348",
            "0x804a348",
            "int __cdecl sub_804A348(int a1)\n{\n  int result; // eax\n\n  while ( (unsigned __int8)sub_804B488(*(_DWORD *)(a1 + 4), *(unsigned __int8 *)(a1 + 48)) )\n    ;\n  result = dword_80533C8;\n  if ( dword_80533C8 )\n  {\n    if ( dword_80533C8 <= dword_80533E8 )\n    {\n      result = uloop_fd_delete(a1);\n      ++dword_8053374;\n      *(_BYTE *)(a1 + 49) = 1;\n    }\n  }\n  return result;\n}\n"
        ],
        "134521859": [
            "sub_804A403",
            "0x804a403",
            "int sub_804A403()\n{\n  void **i; // ebx\n  int result; // eax\n\n  for ( i = (void **)off_80531F8; i != &off_80531F8; i = (void **)*i )\n    result = close((int)i[3]);\n  return result;\n}\n"
        ],
        "134521901": [
            "sub_804A42D",
            "0x804a42d",
            "int sub_804A42D()\n{\n  return uloop_timeout_set(&unk_80531E0, 1);\n}\n"
        ],
        "134521924": [
            "sub_804A444",
            "0x804a444",
            "void sub_804A444()\n{\n  void **i; // ebx\n  int v1; // eax\n  int v2; // esi\n  int v3; // [esp+Ch] [ebp-1Ch] BYREF\n  int optval; // [esp+10h] [ebp-18h] BYREF\n  int v5; // [esp+14h] [ebp-14h] BYREF\n  int v6; // [esp+18h] [ebp-10h] BYREF\n  int v7[3]; // [esp+1Ch] [ebp-Ch] BYREF\n\n  v3 = 1;\n  for ( i = (void **)off_80531F8; i != &off_80531F8; i = (void **)*i )\n  {\n    v1 = dword_80533C0;\n    if ( dword_80533C0 > 0 )\n    {\n      v2 = (int)i[3];\n      v5 = dword_80533C0;\n      optval = 1;\n      v6 = 3;\n      v7[0] = 5;\n      setsockopt(v2, 6, 4, &optval, 4u);\n      setsockopt(v2, 6, 5, &v5, 4u);\n      setsockopt(v2, 6, 6, &v6, 4u);\n      setsockopt(v2, 6, 23, v7, 4u);\n      v1 = setsockopt(v2, 1, 9, &v3, 4u);\n    }\n    i[2] = sub_804A348;\n    uloop_fd_add(i + 2, 1, v1, v1);\n  }\n}\n"
        ],
        "134522128": [
            "sub_804A510",
            "0x804a510",
            "int __cdecl sub_804A510(char *name, char *service, char a3)\n{\n  int v3; // eax\n  const char *v4; // eax\n  struct addrinfo *i; // ebx\n  int v6; // eax\n  int v7; // esi\n  int v8; // eax\n  int v9; // eax\n  _DWORD *v10; // eax\n  void **v11; // edx\n  int v13; // [esp+Ch] [ebp-2Ch]\n  int optval; // [esp+18h] [ebp-20h] BYREF\n  struct addrinfo *pai; // [esp+1Ch] [ebp-1Ch] BYREF\n\n  optval = 1;\n  pai = 0;\n  v3 = getaddrinfo(name, service, &req, &pai);\n  v13 = v3;\n  if ( !v3 )\n  {\n    for ( i = pai; ; i = i->ai_next )\n    {\n      if ( !i )\n      {\n        freeaddrinfo(pai);\n        return v13;\n      }\n      v6 = socket(i->ai_family, i->ai_socktype, i->ai_protocol);\n      v7 = v6;\n      if ( v6 < 0 )\n      {\n        perror(\"socket()\");\n        continue;\n      }\n      if ( setsockopt(v6, 1, 2, &optval, 4u) || i->ai_family == 10 && setsockopt(v7, 41, 26, &optval, 4u) < 0 )\n      {\n        perror(\"setsockopt()\");\n      }\n      else if ( bind(v7, i->ai_addr, i->ai_addrlen) >= 0 )\n      {\n        v8 = listen(v7, 64);\n        if ( v8 >= 0 )\n        {\n          v9 = fcntl64(v7, 1, v8);\n          fcntl64(v7, 2, v9 | 1);\n          v10 = calloc(1u, 0x3Cu);\n          if ( v10 )\n          {\n            v11 = off_80531FC[0];\n            ++v13;\n            v10[3] = v7;\n            *((_BYTE *)v10 + 56) = a3;\n            qmemcpy(v10 + 7, i->ai_addr, 0x1Cu);\n            off_80531FC[0] = (void **)v10;\n            *v10 = &off_80531F8;\n            v10[1] = v11;\n            *v11 = v10;\n            continue;\n          }\n        }\n        else\n        {\n          perror(\"listen()\");\n        }\n      }\n      else\n      {\n        perror(\"bind()\");\n      }\n      close(v7);\n    }\n  }\n  v4 = gai_strerror(v3);\n  fprintf(stderr, \"getaddrinfo(): %s\\n\", v4);\n  return 0;\n}\n"
        ],
        "134522553": [
            "sub_804A6B9",
            "0x804a6b9",
            "int __cdecl sub_804A6B9(int a1)\n{\n  void **v1; // edx\n  int result; // eax\n  unsigned __int16 v3; // cx\n\n  v1 = (void **)off_80531F8;\n  result = -1;\n  while ( v1 != &off_80531F8 )\n  {\n    if ( *((_BYTE *)v1 + 56) )\n    {\nLABEL_6:\n      if ( *((unsigned __int16 *)v1 + 14) == a1 )\n      {\n        HIBYTE(v3) = *((_WORD *)v1 + 15);\n        LOBYTE(v3) = HIBYTE(*((_WORD *)v1 + 15));\n        if ( result == -1 || v3 == 443 )\n          result = v3;\n      }\n      while ( 1 )\n      {\n        v1 = (void **)*v1;\n        if ( v1 == &off_80531F8 )\n          return result;\n        if ( *((_BYTE *)v1 + 56) )\n          goto LABEL_6;\n      }\n    }\n    v1 = (void **)*v1;\n  }\n  return result;\n}\n"
        ],
        "134522634": [
            "sub_804A70A",
            "0x804a70a",
            "int __usercall sub_804A70A@<eax>(int a1@<eax>)\n{\n  int v1; // ecx\n  unsigned __int16 v2; // dx\n\n  v1 = a1 + 4;\n  if ( *(char *)a1 < 0 )\n  {\n    HIBYTE(v2) = *(_WORD *)(a1 + 4);\n    LOBYTE(v2) = HIBYTE(*(_WORD *)(a1 + 4));\n    v1 += (v2 + 6) & 0xFFFFFFFC;\n  }\n  return v1;\n}\n"
        ],
        "134522666": [
            "sub_804A72A",
            "0x804a72a",
            "int (__cdecl *__usercall sub_804A72A@<eax>(int a1@<eax>))(int)\n{\n  void (__cdecl *v2)(int); // eax\n  int (__cdecl *result)(int); // eax\n\n  v2 = *(void (__cdecl **)(int))(a1 + 324);\n  if ( v2 )\n    v2(a1);\n  result = *(int (__cdecl **)(int))(a1 + 332);\n  if ( result )\n    return (int (__cdecl *)(int))result(a1);\n  return result;\n}\n"
        ],
        "134522716": [
            "sub_804A75C",
            "0x804a75c",
            "int (__cdecl *__cdecl sub_804A75C(int a1))(int)\n{\n  int (__cdecl *result)(int); // eax\n\n  result = *(int (__cdecl **)(int))(a1 + 296);\n  if ( result )\n    return (int (__cdecl *)(int))result(a1 - 20);\n  return result;\n}\n"
        ],
        "134522743": [
            "sub_804A777",
            "0x804a777",
            "int __usercall sub_804A777@<eax>(int a1@<edx>, int a2)\n{\n  int v2; // eax\n\n  v2 = dword_80533B4;\n  if ( *(int *)(a2 + 24) > 0 )\n    v2 = dword_80533CC;\n  *(_DWORD *)(a2 + 12) = sub_804A804;\n  uloop_timeout_set(a2, 1000 * v2);\n  return (*(int (__cdecl **)(_DWORD, _DWORD, int, int))(*(_DWORD *)(a2 - 152) + 100))(*(_DWORD *)(a2 - 152), 0, a1, a1);\n}\n"
        ],
        "134522811": [
            "sub_804A7BB",
            "0x804a7bb",
            "_WORD *__usercall sub_804A7BB@<eax>(_WORD *result@<eax>, int *a2@<edx>)\n{\n  int v2; // ebx\n  __int16 v3; // cx\n\n  v2 = *a2;\n  *(_BYTE *)result = *a2;\n  HIBYTE(v3) = *((_WORD *)a2 + 1);\n  LOBYTE(v3) = HIBYTE(*((_WORD *)a2 + 1));\n  result[1] = v3;\n  if ( (_BYTE)v2 == 2 )\n  {\n    *((_DWORD *)result + 1) = a2[1];\n  }\n  else\n  {\n    result += 2;\n    qmemcpy(result, a2 + 2, 0x10u);\n  }\n  return result;\n}\n"
        ],
        "134522864": [
            "sub_804A7F0",
            "0x804a7f0",
            "unsigned __int32 __usercall sub_804A7F0@<eax>(unsigned int *a1@<eax>)\n{\n  return ((_byteswap_ulong(*a1) & 0xFFFFFF) + 3) & 0xFFFFFFFC;\n}\n"
        ],
        "134522884": [
            "sub_804A804",
            "0x804a804",
            "int __cdecl sub_804A804(int a1)\n{\n  int v1; // eax\n\n  *(_DWORD *)(a1 + 28) = 4;\n  v1 = *(_DWORD *)(a1 - 152) + 72;\n  *(_BYTE *)(v1 + 58) = 1;\n  return uloop_timeout_set(v1, 0);\n}\n"
        ],
        "134522926": [
            "sub_804A82E",
            "0x804a82e",
            "unsigned __int32 __cdecl sub_804A82E(int a1, int a2, const char *a3)\n{\n  char v3; // al\n  const char *v4; // edx\n  const char *v5; // eax\n  unsigned __int32 result; // eax\n  unsigned int *v7; // edi\n  int v8; // esi\n  int v9; // edi\n  const char *v10; // eax\n\n  *(_DWORD *)(a1 + 204) = a2;\n  v3 = sub_804B5F8(a1);\n  v4 = \"Usage: %s -p [addr:]port -h docroot\\n\"\n       \"\\t-f              Do not fork to background\\n\"\n       \"\\t-c file         Configuration file, default is '/etc/httpd.conf'\\n\"\n       \"\\t-p [addr:]port  Bind to specified address and port, multiple allowed\\n\"\n       \"\\t-h directory    Specify the document root, default is '.'\\n\"\n       \"\\t-E string       Use given virtual URL as 404 error handler\\n\"\n       \"\\t-I string       Use given filename as index for directories, multiple allowed\\n\"\n       \"\\t-S              Do not follow symbolic links outside of the docroot\\n\"\n       \"\\t-D              Do not allow directory listings, send 403 instead\\n\"\n       \"\\t-R              Enable RFC1918 filter\\n\"\n       \"\\t-n count        Maximum allowed number of concurrent script requests\\n\"\n       \"\\t-N count        Maximum allowed number of concurrent connections\\n\"\n       \"\\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\\n\"\n       \"\\t-y alias[=path]\\tURL alias handle\\n\"\n       \"\\t-i .ext=path    Use interpreter at path for files with the given extension\\n\"\n       \"\\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\\n\"\n       \"\\t-T seconds      Network timeout in seconds, default is 30\\n\"\n       \"\\t-k seconds      HTTP keepalive timeout\\n\"\n       \"\\t-d string       URL decode given string\\n\"\n       \"\\t-r string       Specify basic auth realm\\n\"\n       \"\\t-m string       MD5 crypt given string\\n\"\n       \"\\n\"\n     + 1200;\n  if ( v3 )\n    v4 = \"Transfer-Encoding: chunked\\r\\n\";\n  v5 = \"Connection: close\";\n  if ( !*(_BYTE *)(a1 + 229) )\n    v5 = \"Connection: Keep-Alive\";\n  result = ustream_printf(\n             *(_DWORD *)(a1 + 16),\n             \"%s %03i %s\\r\\n%s\\r\\n%s\",\n             (&off_804EEF8)[*(_DWORD *)(a1 + 212)],\n             a2,\n             a3,\n             v5,\n             v4);\n  if ( !*(_BYTE *)(a1 + 229) )\n    result = ustream_printf(*(_DWORD *)(a1 + 16), \"Keep-Alive: timeout=%d\\r\\n\", dword_80533CC);\n  v7 = *(unsigned int **)(a1 + 292);\n  if ( v7 )\n  {\n    v8 = sub_804A70A(*(_DWORD *)(a1 + 292));\n    result = _byteswap_ulong(*v7) & 0xFFFFFF;\n    v9 = (int)v7 + result - v8;\n    while ( v9 > 0 )\n    {\n      result = sub_804A7F0((unsigned int *)v8);\n      if ( result > v9 || result <= 3 )\n        break;\n      v10 = 0;\n      if ( v8 )\n        v10 = (const char *)sub_804A70A(v8);\n      ustream_printf(*(_DWORD *)(a1 + 16), \"%s: %s\\r\\n\", (const char *)(v8 + 6), v10);\n      result = sub_804A7F0((unsigned int *)v8);\n      v9 -= result;\n      v8 += result;\n    }\n  }\n  return result;\n}\n"
        ],
        "134523164": [
            "sub_804A91C",
            "0x804a91c",
            "int __cdecl sub_804A91C(int a1)\n{\n  int v1; // eax\n\n  sub_804B7B3(a1);\n  sub_804A72A(a1);\n  blob_buf_init(a1 + 292, 0);\n  memset((void *)(a1 + 308), 0, 0x138u);\n  if ( dword_80533CC && !*(_BYTE *)(a1 + 229) )\n  {\n    *(_DWORD *)(a1 + 196) = 0;\n    ++*(_DWORD *)(a1 + 192);\n    *(_DWORD *)(a1 + 180) = sub_804A777;\n    return uloop_timeout_set(a1 + 168, 1);\n  }\n  else\n  {\n    v1 = *(_DWORD *)(a1 + 16);\n    *(_DWORD *)(a1 + 196) = 4;\n    v1 += 72;\n    *(_BYTE *)(v1 + 58) = 1;\n    return uloop_timeout_set(v1, 0);\n  }\n}\n"
        ],
        "134523321": [
            "sub_804A9B9",
            "0x804a9b9",
            "int sub_804A9B9(int a1, int a2, const char *a3, char *format, ...)\n{\n  va_list __varargs; // [esp+34h] [ebp+18h] BYREF\n\n  va_start(__varargs, format);\n  sub_804A82E(a1, a2, a3);\n  ustream_printf(*(_DWORD *)(a1 + 16), \"Content-Type: text/html\\r\\n\\r\\n\");\n  sub_804B799(a1, \"<h1>%s</h1>\", a3);\n  if ( format )\n    sub_804B6CC(a1, format, __varargs);\n  return sub_804A91C(a1);\n}\n"
        ],
        "134523421": [
            "sub_804AA1D",
            "0x804aa1d",
            "int __usercall sub_804AA1D@<eax>(const char *a1@<ecx>, int a2@<edx>, int a3@<eax>, int a4@<ebx>)\n{\n  int v5; // eax\n\n  sub_804A9B9(a3, a2, a1, 0, a4);\n  v5 = *(_DWORD *)(a3 + 16);\n  *(_DWORD *)(a3 + 196) = 4;\n  v5 += 72;\n  *(_BYTE *)(v5 + 58) = 1;\n  return uloop_timeout_set(v5, 0);\n}\n"
        ],
        "134523476": [
            "sub_804AA54",
            "0x804aa54",
            "int __cdecl sub_804AA54(int a1, char *haystack)\n{\n  int v2; // esi\n  char *v3; // eax\n  char *v4; // esi\n  char *v5; // edi\n  int v6; // ecx\n  bool v7; // zf\n  int v8; // edi\n  int v9; // esi\n  int v10; // eax\n  const char *v12; // [esp+Ch] [ebp-24h]\n  const char *s2; // [esp+10h] [ebp-20h]\n  char *v14; // [esp+14h] [ebp-1Ch]\n\n  v2 = 0;\n  v3 = strstr(haystack, \"\\r\\n\");\n  v14 = v3;\n  if ( !v3 )\n    return v2;\n  if ( haystack == v3 )\n  {\n    v2 = 1;\n    ustream_consume(*(_DWORD *)(a1 + 16), 2, v3, v3);\n    return v2;\n  }\n  *v3 = 0;\n  blob_buf_init(a1 + 276, 0);\n  s2 = strtok(haystack, \" \");\n  v4 = strtok(0, \" \");\n  v12 = strtok(0, \" \");\n  if ( v4 != 0 && s2 != 0 && v12 )\n  {\n    v5 = v4;\n    v6 = -1;\n    do\n    {\n      if ( !v6 )\n        break;\n      v7 = *v5++ == (v12 == 0);\n      --v6;\n    }\n    while ( !v7 );\n    blobmsg_add_field(a1 + 276, 3, \"URL\", v4, ~v6);\n    memset((void *)(a1 + 208), 0, 0x1Cu);\n    v8 = 0;\n    while ( strcmp((&s1)[v8], s2) )\n    {\n      if ( ++v8 == 4 )\n      {\n        v8 = -1;\n        break;\n      }\n    }\n    v9 = 0;\n    while ( strcmp((&off_804EEF8)[v9], v12) )\n    {\n      if ( ++v9 == 3 )\n      {\n        v9 = -1;\n        break;\n      }\n    }\n    if ( v8 >= 0 && v9 >= 0 )\n    {\n      *(_DWORD *)(a1 + 208) = v8;\n      *(_DWORD *)(a1 + 212) = v9;\n      if ( v8 == 1 || v9 != 2 || (v10 = 1, !dword_80533CC) )\n      {\n        *(_BYTE *)(a1 + 229) = 1;\n        v10 = 1;\n      }\n      goto LABEL_25;\n    }\n    *(_DWORD *)(a1 + 212) = 1;\n  }\n  v10 = 3;\nLABEL_25:\n  *(_DWORD *)(a1 + 196) = v10;\n  v2 = 1;\n  ustream_consume(*(_DWORD *)(a1 + 16), v14 + 2 - haystack, v10, v10);\n  if ( *(_DWORD *)(a1 + 196) == 3 )\n    sub_804AA1D(\"Bad Request\", 400, a1, a1);\n  return v2;\n}\n"
        ],
        "134523924": [
            "sub_804AC14",
            "0x804ac14",
            "void __usercall sub_804AC14(int a1@<edi>, int a2)\n{\n  int read_buf; // eax\n  int (__cdecl *v3)(int, int); // ecx\n  int v4; // eax\n  unsigned __int8 v5; // dl\n  int v6; // edx\n  unsigned int v7; // eax\n  void (__cdecl *v8)(int); // eax\n  int v9; // [esp-8h] [ebp-40h]\n  int v10; // [esp-8h] [ebp-40h]\n  int v11; // [esp-4h] [ebp-3Ch]\n  int v12; // [esp-4h] [ebp-3Ch]\n  char *nptr; // [esp+Ch] [ebp-2Ch]\n  int v14; // [esp+18h] [ebp-20h] BYREF\n  char *endptr; // [esp+1Ch] [ebp-1Ch] BYREF\n\n  if ( *(_DWORD *)(a2 + 196) != 3 )\n  {\n    while ( 1 )\n    {\n      read_buf = ustream_get_read_buf(*(_DWORD *)(a2 + 16), &v14, a1, a1);\n      a1 = read_buf;\n      if ( !read_buf || !v14 )\n        break;\n      v3 = *(int (__cdecl **)(int, int))(a2 + 308);\n      if ( !v3 )\n        return;\n      read_buf = *(_DWORD *)(a2 + 224);\n      if ( read_buf > v14 )\n        read_buf = v14;\n      if ( read_buf )\n      {\n        if ( *(_BYTE *)(a2 + 336) )\n          break;\n        v11 = v14;\n        v9 = read_buf;\n        v4 = v3(a2, a1);\n        *(_DWORD *)(a2 + 224) -= v4;\n        ustream_consume(*(_DWORD *)(a2 + 16), v4, v9, v11);\n      }\n      else\n      {\n        v5 = *(_BYTE *)(a2 + 231);\n        if ( !v5 )\n          break;\n        if ( v5 > 1u )\n          read_buf = 2;\n        nptr = (char *)(a1 + read_buf);\n        read_buf = (int)strstr((const char *)(a1 + read_buf), \"\\r\\n\");\n        endptr = (char *)read_buf;\n        if ( !read_buf )\n          break;\n        *(_BYTE *)read_buf = 0;\n        v12 = v6;\n        v7 = strtoul(nptr, &endptr, 16);\n        ++*(_BYTE *)(a2 + 231);\n        *(_DWORD *)(a2 + 224) = v7;\n        ustream_consume(*(_DWORD *)(a2 + 16), &endptr[-a1 + 2], v10, v12);\n        read_buf = (int)endptr;\n        if ( endptr && *endptr )\n        {\n          *(_DWORD *)(a2 + 224) = 0;\nLABEL_18:\n          *(_BYTE *)(a2 + 231) = 0;\n          break;\n        }\n        if ( !*(_DWORD *)(a2 + 224) )\n          goto LABEL_18;\n      }\n    }\n    ustream_get_read_buf(*(_DWORD *)(a2 + 16), &v14, read_buf, read_buf);\n    if ( !*(_DWORD *)(a2 + 224) && !*(_BYTE *)(a2 + 231) && *(_DWORD *)(a2 + 196) != 3 )\n    {\n      v8 = *(void (__cdecl **)(int))(a2 + 312);\n      if ( v8 )\n        v8(a2);\n      *(_DWORD *)(a2 + 196) = 3;\n    }\n  }\n}\n"
        ],
        "134524286": [
            "sub_804AD7E",
            "0x804ad7e",
            "int __usercall sub_804AD7E@<eax>(int a1@<edi>, int a2)\n{\n  sub_804AC14(a1, a2);\n  return 0;\n}\n"
        ],
        "134524304": [
            "sub_804AD90",
            "0x804ad90",
            "char __usercall sub_804AD90@<al>(const char *a1@<edi>, int a2, char *haystack)\n{\n  char result; // al\n  unsigned int v4; // eax\n  int v5; // eax\n  unsigned int *v6; // edx\n  const char *v7; // esi\n  char *v8; // eax\n  char *v9; // eax\n  int v10; // eax\n  const char *v11; // esi\n  char *v12; // edx\n  int v13; // eax\n  int v14; // eax\n  const char *v15; // ecx\n  int v16; // edx\n  char *v17; // eax\n  char v18; // dl\n  unsigned int v19; // kr04_4\n  signed __int32 v20; // [esp+14h] [ebp-3Ch]\n  int v21; // [esp+18h] [ebp-38h]\n  char *v22; // [esp+1Ch] [ebp-34h]\n  unsigned int v23; // [esp+20h] [ebp-30h]\n  int i; // [esp+24h] [ebp-2Ch]\n  char *endptr; // [esp+34h] [ebp-1Ch] BYREF\n\n  v22 = strstr(haystack, \"\\r\\n\");\n  result = 0;\n  if ( v22 )\n  {\n    *v22 = 0;\n    if ( !*haystack )\n    {\n      v4 = uloop_timeout_cancel(a2 + 168);\n      *(_DWORD *)(a2 + 196) = 2;\n      if ( dword_80533B8 && (v4 = sub_804BA75(a2 + 256), (_BYTE)v4) && (v4 = sub_804BA75(a2 + 236), !(_BYTE)v4) )\n      {\n        v5 = sub_804A9B9(a2, 403, \"Forbidden\", \"Rejected request from RFC1918 IP to public server address\");\n      }\n      else\n      {\n        if ( *(_BYTE *)(a2 + 200) )\n          goto LABEL_88;\n        if ( !dword_80533BC )\n          goto LABEL_88;\n        v21 = sub_804A6B9(*(unsigned __int8 *)(a2 + 236));\n        v4 = v21 + 1;\n        if ( v21 == -1 )\n          goto LABEL_88;\n        v6 = *(unsigned int **)(a2 + 276);\n        if ( v6 )\n        {\n          v7 = 0;\n          a1 = 0;\n          v20 = (_byteswap_ulong(*v6) & 0xFFFFFF) - 4;\n          v4 = (unsigned int)(v6 + 1);\n          for ( i = (int)(v6 + 1); v20 > 0; i += v23 )\n          {\n            v4 = sub_804A7F0((unsigned int *)i);\n            v23 = v4;\n            if ( v4 <= 3 || v20 < v4 )\n              break;\n            if ( !strcmp((const char *)(i + 6), \"host\") )\n            {\n              v7 = 0;\n              if ( i )\n                v7 = (const char *)sub_804A70A(i);\n            }\n            v4 = strcmp((const char *)(i + 6), \"URL\");\n            if ( !v4 )\n            {\n              a1 = 0;\n              if ( i )\n              {\n                v4 = sub_804A70A(i);\n                a1 = (const char *)v4;\n              }\n            }\n            if ( a1 && v7 )\n              break;\n            v20 -= v23;\n          }\n        }\n        else\n        {\n          v7 = 0;\n          a1 = 0;\n        }\n        if ( a1 && v7 )\n        {\n          v8 = strchr(v7, 93);\n          if ( v8 )\n          {\n            v8[1] = 0;\n          }\n          else\n          {\n            v9 = strchr(v7, 58);\n            if ( v9 )\n              *v9 = 0;\n          }\n          *(_BYTE *)(a2 + 230) = 1;\n          *(_BYTE *)(a2 + 229) = 1;\n          sub_804A82E(a2, 307, \"Temporary Redirect\");\n          if ( v21 == 443 )\n            ustream_printf(*(_DWORD *)(a2 + 16), \"Location: https://%s%s\\r\\n\\r\\n\", v7, a1);\n          else\n            ustream_printf(*(_DWORD *)(a2 + 16), \"Location: https://%s:%d%s\\r\\n\\r\\n\", v7, v21, a1);\n          v5 = sub_804A91C(a2);\n        }\n        else\n        {\nLABEL_88:\n          if ( *(_BYTE *)(a2 + 228) )\n            ustream_printf(*(_DWORD *)(a2 + 16), \"HTTP/1.1 100 Continue\\r\\n\\r\\n\", v4, v4);\n          v10 = *(_DWORD *)(a2 + 216);\n          if ( v10 == 3 || v10 == 7 && *(_DWORD *)(a2 + 208) == 1 )\n            *(_BYTE *)(a2 + 229) = 1;\n          v5 = sub_804CBEF(a2);\n        }\n      }\n      goto LABEL_84;\n    }\n    v5 = sub_804BA46(haystack);\n    v11 = (const char *)v5;\n    v12 = haystack;\n    if ( !v5 )\n    {\n      *(_DWORD *)(a2 + 196) = 3;\n      goto LABEL_84;\n    }\n    while ( 1 )\n    {\n      v14 = *v12;\n      if ( !(_BYTE)v14 )\n        break;\n      v13 = 2 * v14;\n      if ( (*(_BYTE *)(_ctype_b + v13) & 1) != 0 )\n        *v12 = *(_WORD *)(_ctype_tolower + v13);\n      ++v12;\n    }\n    if ( !strcmp(haystack, \"expect\") )\n    {\n      if ( !strcasecmp(v11, \"100-continue\") )\n      {\n        *(_BYTE *)(a2 + 228) = 1;\n        goto LABEL_83;\n      }\n      v15 = \"Precondition Failed\";\n      v16 = 412;\n    }\n    else\n    {\n      if ( strcmp(haystack, \"content-length\") )\n      {\n        if ( !strcmp(haystack, \"transfer-encoding\") )\n        {\n          if ( !strcmp(v11, \"chunked\") )\n            *(_BYTE *)(a2 + 231) = 1;\n        }\n        else if ( !strcmp(haystack, \"connection\") )\n        {\n          if ( !strcasecmp(v11, \"close\") )\n            *(_BYTE *)(a2 + 229) = 1;\n        }\n        else if ( !strcmp(haystack, \"user-agent\") )\n        {\n          if ( strstr(v11, \"Opera\") )\n          {\n            *(_DWORD *)(a2 + 216) = 6;\n          }\n          else\n          {\n            v17 = strstr(v11, \"MSIE \");\n            if ( v17 )\n            {\n              *(_DWORD *)(a2 + 216) = 8;\n              v18 = v17[5];\n              if ( v18 && v17[6] == 46 && v18 >= 52 && (v18 <= 53 || v18 == 54 && !strstr(v17, \"SV1\")) )\n                *(_DWORD *)(a2 + 216) = 7;\n            }\n            else if ( strstr(v11, \"Chrome/\") )\n            {\n              *(_DWORD *)(a2 + 216) = 2;\n            }\n            else if ( strstr(v11, \"Safari/\") && strstr(v11, \"Mac OS X\") )\n            {\n              *(_DWORD *)(a2 + 216) = 3;\n            }\n            else if ( strstr(v11, \"Gecko/\") )\n            {\n              *(_DWORD *)(a2 + 216) = 1;\n            }\n            else if ( strstr(v11, \"Konqueror\") )\n            {\n              *(_DWORD *)(a2 + 216) = 5;\n            }\n          }\n        }\n        goto LABEL_83;\n      }\n      *(_DWORD *)(a2 + 224) = strtoul(v11, &endptr, 0);\n      if ( !endptr || !*endptr )\n      {\nLABEL_83:\n        v19 = strlen(v11) + 1;\n        a1 = &v11[v19];\n        v5 = blobmsg_add_field(a2 + 276, 3, haystack, v11, v19);\n        *(_DWORD *)(a2 + 196) = 1;\nLABEL_84:\n        ustream_consume(*(_DWORD *)(a2 + 16), v22 + 2 - haystack, v5, v5);\n        result = 1;\n        if ( *(_DWORD *)(a2 + 196) == 2 )\n        {\n          sub_804AC14((int)a1, a2);\n          return 0;\n        }\n        return result;\n      }\n      v15 = \"Bad Request\";\n      v16 = 400;\n    }\n    v5 = sub_804AA1D(v15, v16, a2, a2);\n    goto LABEL_84;\n  }\n  return result;\n}\n"
        ],
        "134525705": [
            "sub_804B309",
            "0x804b309",
            "char *__usercall sub_804B309@<eax>(char *result@<eax>, int a2)\n{\n  int v2; // esi\n  unsigned int v3; // edx\n  int (__cdecl *v4)(int, char *); // edx\n  char *v5; // [esp+Ch] [ebp-Ch] BYREF\n\n  byte_80533F4 = 0;\n  v2 = *(_DWORD *)(a2 + 16);\n  do\n  {\n    result = (char *)ustream_get_read_buf(v2, &v5, result, result);\n    if ( !result )\n      break;\n    if ( !v5 )\n      break;\n    v3 = *(_DWORD *)(a2 + 196);\n    if ( v3 > 2 )\n      break;\n    v4 = funcs_804B354[v3];\n    if ( !v4 )\n      break;\n    result = (char *)v4(a2, result);\n    if ( !(_BYTE)result )\n    {\n      result = v5;\n      if ( *(char **)(v2 + 28) == v5 && *(_DWORD *)(a2 + 196) != 2 )\n        return (char *)sub_804AA1D(\"Request Entity Too Large\", 413, a2, a2);\n      return result;\n    }\n  }\n  while ( !byte_80533F4 );\n  return result;\n}\n"
        ],
        "134525841": [
            "sub_804B391",
            "0x804b391",
            "char *__usercall sub_804B391@<eax>(char *a1@<eax>, int a2)\n{\n  return sub_804B309(a1, a2 - 20);\n}\n"
        ],
        "134525854": [
            "sub_804B39E",
            "0x804b39e",
            "int __cdecl sub_804B39E(int *ptr)\n{\n  int result; // eax\n  int v2; // edx\n  int v3; // eax\n\n  result = ptr[4];\n  if ( *(_BYTE *)(result + 129)\n    || (v2 = ptr[49], v2 == 5)\n    || v2 != 2 && *(_BYTE *)(result + 130) && !*(_DWORD *)(result + 52) )\n  {\n    if ( ptr[2] )\n    {\n      ptr[49] = 5;\n    }\n    else\n    {\n      byte_80533F4 = 1;\n      --dword_80533E8;\n      sub_804A72A((int)ptr);\n      uloop_timeout_cancel(ptr + 42);\n      ustream_free(ptr + 5);\n      close(ptr[40]);\n      v3 = *ptr;\n      *(_DWORD *)(v3 + 4) = ptr[1];\n      *(_DWORD *)ptr[1] = v3;\n      ptr[1] = 0;\n      *ptr = 0;\n      blob_buf_free(ptr + 69);\n      blob_buf_free(ptr + 73);\n      free(ptr);\n      return sub_804A42D();\n    }\n  }\n  return result;\n}\n"
        ],
        "134526075": [
            "sub_804B47B",
            "0x804b47b",
            "int __cdecl sub_804B47B(int a1)\n{\n  return sub_804B39E((int *)(a1 - 20));\n}\n"
        ],
        "134526088": [
            "sub_804B488",
            "0x804b488",
            "char __cdecl sub_804B488(int fd, char a2)\n{\n  int v2; // ebx\n  int v3; // edi\n  char result; // al\n  int v5; // edx\n  void **v6; // eax\n  int v7; // edx\n  socklen_t addr_len; // [esp+10h] [ebp-38h] BYREF\n  struct sockaddr addr; // [esp+14h] [ebp-34h] BYREF\n\n  if ( !dword_80533F0 )\n    dword_80533F0 = (int)calloc(1u, 0x26Cu);\n  v2 = dword_80533F0;\n  addr_len = 28;\n  v3 = accept(fd, &addr, &addr_len);\n  result = 0;\n  if ( v3 >= 0 )\n  {\n    sub_804A7BB((_WORD *)(v2 + 256), (int *)&addr);\n    addr_len = 28;\n    getsockname(v3, &addr, &addr_len);\n    sub_804A7BB((_WORD *)(v2 + 236), (int *)&addr);\n    *(_DWORD *)(v2 + 16) = v2 + 20;\n    if ( !a2 )\n    {\n      *(_DWORD *)(v2 + 120) = sub_804B391;\n      *(_DWORD *)(v2 + 124) = sub_804A75C;\n      *(_DWORD *)(v2 + 128) = sub_804B47B;\n    }\n    *(_BYTE *)(v2 + 148) = 1;\n    ustream_fd_init(v2 + 20, v3, v5, v5);\n    *(_DWORD *)(v2 + 180) = sub_804A777;\n    uloop_timeout_set(v2 + 168, 1);\n    v6 = off_8053204[0];\n    off_8053204[0] = (void **)v2;\n    *(_DWORD *)v2 = &off_8053200;\n    *(_DWORD *)(v2 + 4) = v6;\n    *v6 = (void *)v2;\n    ++dword_80533E8;\n    v7 = dword_80533EC + 1;\n    *(_DWORD *)(v2 + 12) = dword_80533EC;\n    dword_80533F0 = 0;\n    *(_BYTE *)(v2 + 200) = a2;\n    dword_80533EC = v7;\n    return 1;\n  }\n  return result;\n}\n"
        ],
        "134526382": [
            "sub_804B5AE",
            "0x804b5ae",
            "int (__cdecl *__usercall sub_804B5AE@<eax>(int a1@<eax>))(void **)\n{\n  int (__cdecl *result)(void **); // eax\n  void **i; // ebx\n\n  uloop_done(a1);\n  result = (int (__cdecl *)(void **))sub_804A403();\n  for ( i = (void **)off_8053200; i != &off_8053200; i = (void **)*i )\n  {\n    close((int)i[40]);\n    result = (int (__cdecl *)(void **))i[80];\n    if ( result )\n      result = (int (__cdecl *)(void **))result(i);\n  }\n  return result;\n}\n"
        ],
        "134526456": [
            "sub_804B5F8",
            "0x804b5f8",
            "int __cdecl sub_804B5F8(int a1)\n{\n  int result; // eax\n  int v2; // eax\n\n  result = 0;\n  if ( *(_DWORD *)(a1 + 212) == 2 && (unsigned int)(*(_DWORD *)(a1 + 208) - 2) > 1 )\n  {\n    v2 = *(_DWORD *)(a1 + 204);\n    if ( v2 == 204 || v2 == 304 )\n    {\n      return 0;\n    }\n    else\n    {\n      LOBYTE(v2) = *(_BYTE *)(a1 + 230);\n      return v2 ^ 1;\n    }\n  }\n  return result;\n}\n"
        ],
        "134526522": [
            "sub_804B63A",
            "0x804b63a",
            "int __cdecl sub_804B63A(int a1, int a2, int a3)\n{\n  int result; // eax\n  char v4; // [esp+Fh] [ebp-19h]\n\n  result = sub_804B5F8(a1);\n  v4 = result;\n  if ( *(_DWORD *)(a1 + 196) != 5 )\n  {\n    uloop_timeout_set(a1 + 168, 1000 * dword_80533B4);\n    if ( v4 )\n      ustream_printf(*(_DWORD *)(a1 + 16), \"%X\\r\\n\", a3);\n    result = ustream_write(*(_DWORD *)(a1 + 16), a2, a3, 1);\n    if ( v4 )\n      return ustream_printf(*(_DWORD *)(a1 + 16), \"\\r\\n\", a3);\n  }\n  return result;\n}\n"
        ],
        "134526668": [
            "sub_804B6CC",
            "0x804b6cc",
            "void __cdecl sub_804B6CC(int a1, char *format, __gnuc_va_list __varargs)\n{\n  int v3; // ecx\n  unsigned int v4; // esi\n  int v5; // edx\n  int v6; // eax\n  char s[280]; // [esp+10h] [ebp-118h] BYREF\n\n  if ( *(_DWORD *)(a1 + 196) != 5 )\n  {\n    uloop_timeout_set(a1 + 168, 1000 * dword_80533B4);\n    if ( (unsigned __int8)sub_804B5F8(a1) )\n    {\n      v4 = vsnprintf(s, 0x100u, format, __varargs);\n      ustream_printf(*(_DWORD *)(a1 + 16), \"%X\\r\\n\", v4);\n      if ( v4 > 0xFF )\n        v6 = ustream_vprintf(*(_DWORD *)(a1 + 16), format, __varargs, v5);\n      else\n        v6 = ustream_write(*(_DWORD *)(a1 + 16), s, v4, 1);\n      ustream_printf(*(_DWORD *)(a1 + 16), \"\\r\\n\", v4, v6);\n    }\n    else\n    {\n      ustream_vprintf(*(_DWORD *)(a1 + 16), format, __varargs, v3);\n    }\n  }\n}\n"
        ],
        "134526873": [
            "sub_804B799",
            "0x804b799",
            "void sub_804B799(int a1, char *format, ...)\n{\n  va_list __varargs; // [esp+1Ch] [ebp+10h] BYREF\n\n  va_start(__varargs, format);\n  sub_804B6CC(a1, format, __varargs);\n}\n"
        ],
        "134526899": [
            "sub_804B7B3",
            "0x804b7b3",
            "int __cdecl sub_804B7B3(int a1)\n{\n  int result; // eax\n\n  result = sub_804B5F8(a1);\n  if ( (_BYTE)result )\n  {\n    if ( *(_DWORD *)(a1 + 196) != 5 )\n      return ustream_printf(*(_DWORD *)(a1 + 16), \"0\\r\\n\\r\\n\", result, result);\n  }\n  return result;\n}\n"
        ],
        "134526950": [
            "sub_804B7E6",
            "0x804b7e6",
            "int __cdecl sub_804B7E6(int a1, int a2, int a3, int a4)\n{\n  int v4; // edx\n  int i; // edi\n  int result; // eax\n  int v7; // ecx\n  char v8; // al\n  char v9; // al\n  int v10; // esi\n  char v11; // al\n  char v12; // bl\n  char v13; // [esp+1h] [ebp-Dh]\n\n  v4 = 0;\n  for ( i = 0; ; ++i )\n  {\n    result = v4;\n    if ( i >= a4 || v4 >= a2 )\n      break;\n    v7 = i;\n    v8 = *(_BYTE *)(a3 + i);\n    if ( v8 == 37 )\n    {\n      i += 2;\n      if ( i >= a4 )\n        return -2;\n      v13 = *(_BYTE *)(a3 + v7 + 1);\n      v9 = v13;\n      if ( (*(_BYTE *)(_ctype_b + 2 * v13) & 0x10) == 0 )\n        return -2;\n      v10 = *(char *)(a3 + v7 + 2);\n      if ( (*(_BYTE *)(_ctype_b + 2 * v10) & 0x10) == 0 )\n        return -2;\n      if ( v13 > 57 )\n      {\n        if ( v13 > 70 )\n          v9 = v13 - 87;\n        else\n          v9 = v13 - 55;\n      }\n      v11 = 16 * v9;\n      v12 = v10 - 48;\n      if ( (char)v10 > 57 )\n      {\n        v12 = v10 - 87;\n        if ( (char)v10 <= 70 )\n          v12 = v10 - 55;\n      }\n      *(_BYTE *)(a1 + v4) = v12 + v11;\n    }\n    else\n    {\n      *(_BYTE *)(a1 + v4) = v8;\n    }\n    ++v4;\n  }\n  *(_BYTE *)(a1 + v4) = 0;\n  if ( i != a4 )\n    return -1;\n  return result;\n}\n"
        ],
        "134527130": [
            "sub_804B89A",
            "0x804b89a",
            "int __cdecl sub_804B89A(int a1, int a2, int a3, int a4)\n{\n  int result; // eax\n  int i; // edx\n  int v6; // edi\n  int v7; // ebx\n\n  result = 0;\n  for ( i = 0; i < a4 && result < a2; ++i )\n  {\n    v6 = *(char *)(a3 + i);\n    if ( (*(_BYTE *)(_ctype_b + 2 * v6 + 1) & 8) != 0\n      || (unsigned __int8)(*(_BYTE *)(a3 + i) - 45) <= 1u\n      || *(_BYTE *)(a3 + i) == 95\n      || (_BYTE)v6 == 126 )\n    {\n      *(_BYTE *)(a1 + result++) = *(_BYTE *)(a3 + i);\n    }\n    else\n    {\n      v7 = result + 2;\n      if ( result + 2 >= a2 )\n        return -1;\n      *(_BYTE *)(a1 + result) = 37;\n      *(_BYTE *)(a1 + result + 1) = byte_804EF10[*(_BYTE *)(a3 + i) >> 4];\n      result += 3;\n      *(_BYTE *)(a1 + v7) = byte_804EF10[*(_BYTE *)(a3 + i) & 0xF];\n    }\n  }\n  if ( i == a4 )\n    return result;\n  return -1;\n}\n"
        ],
        "134527297": [
            "sub_804B941",
            "0x804b941",
            "int __cdecl sub_804B941(int a1, int a2, int a3, int a4)\n{\n  int v4; // eax\n  int v5; // ebx\n  int v6; // ecx\n  int v7; // edx\n  int v8; // edi\n\n  v4 = 0;\n  v5 = 0;\n  v6 = 0;\n  while ( v5 <= a4 )\n  {\n    v7 = *(unsigned __int8 *)(a3 + v5);\n    if ( !(_BYTE)v7 )\n      break;\n    if ( (unsigned int)(v7 - 48) > 9 )\n    {\n      v8 = v7 - 65;\n      if ( (unsigned int)(v7 - 65) > 0x19 )\n      {\n        if ( (unsigned int)(v7 - 97) > 0x19 )\n        {\n          if ( v7 == 43 )\n          {\n            v8 = 62;\n          }\n          else if ( v7 == 47 )\n          {\n            v8 = 63;\n          }\n          else\n          {\n            v8 = 0;\n            if ( v7 != 61 )\n              goto LABEL_18;\n          }\n        }\n        else\n        {\n          v8 = v7 - 71;\n        }\n      }\n    }\n    else\n    {\n      v8 = v7 + 4;\n    }\n    v6 = v8 | (v6 << 6);\n    if ( (v5 & 3) == 3 )\n    {\n      if ( v4 + 3 >= a2 )\n        break;\n      *(_BYTE *)(a1 + v4 + 1) = BYTE1(v6);\n      *(_BYTE *)(a1 + v4 + 2) = v6;\n      *(_BYTE *)(a1 + v4) = BYTE2(v6);\n      v4 += 3;\n    }\nLABEL_18:\n    ++v5;\n  }\n  *(_BYTE *)(a1 + v4) = 0;\n  return v4 + 1;\n}\n"
        ],
        "134527462": [
            "sub_804B9E6",
            "0x804b9e6",
            "bool __cdecl sub_804B9E6(char *s2, char *s1)\n{\n  unsigned int v2; // edi\n  bool v3; // dl\n  int v4; // eax\n\n  v2 = strlen(s2) + 1;\n  v3 = *s2 == 47 && v2 == 2;\n  if ( !v3 )\n  {\n    v4 = strncmp(s1, s2, v2 - 1);\n    v3 = 0;\n    if ( !v4 )\n      return s1[v2 - 1] == 0 || s1[v2 - 1] == 47;\n  }\n  return v3;\n}\n"
        ],
        "134527558": [
            "sub_804BA46",
            "0x804ba46",
            "char *__cdecl sub_804BA46(char *s)\n{\n  char *result; // eax\n\n  result = strchr(s, 58);\n  if ( result )\n  {\n    *result++ = 0;\n    while ( (*(_BYTE *)(_ctype_b + 2 * *result) & 0x20) != 0 )\n      ++result;\n  }\n  return result;\n}\n"
        ],
        "134527605": [
            "sub_804BA75",
            "0x804ba75",
            "int __cdecl sub_804BA75(int a1)\n{\n  int result; // eax\n  unsigned __int32 v2; // eax\n\n  result = 0;\n  if ( *(_BYTE *)a1 == 2 )\n  {\n    v2 = _byteswap_ulong(*(_DWORD *)(a1 + 4));\n    return v2 - 167772160 <= 0xFFFFFF || v2 + 1408237568 <= 0xFFFFF || v2 + 1062731776 <= 0xFFFF;\n  }\n  return result;\n}\n"
        ],
        "134527679": [
            "sub_804BABF",
            "0x804babf",
            "int __usercall sub_804BABF@<eax>(int a1@<eax>)\n{\n  int v1; // ecx\n  unsigned __int16 v2; // dx\n\n  v1 = a1 + 4;\n  if ( *(char *)a1 < 0 )\n  {\n    HIBYTE(v2) = *(_WORD *)(a1 + 4);\n    LOBYTE(v2) = HIBYTE(*(_WORD *)(a1 + 4));\n    v1 += (v2 + 6) & 0xFFFFFFFC;\n  }\n  return v1;\n}\n"
        ],
        "134527711": [
            "sub_804BADF",
            "0x804badf",
            "void **__usercall sub_804BADF@<eax>(int a1@<eax>, int a2@<edx>)\n{\n  int v2; // esi\n  void **i; // ebx\n\n  v2 = a1;\n  for ( i = (void **)off_8053210; i != &off_8053210; i = (void **)*i )\n  {\n    if ( a2 )\n    {\n      if ( i[3] )\n        continue;\n      a1 = ((int (__cdecl *)(int, int, int, int))i[4])(a2, v2, a1, a1);\n    }\n    else\n    {\n      if ( i[4] )\n        continue;\n      a1 = ((int (__cdecl *)(int))i[3])(v2);\n    }\n    if ( (_BYTE)a1 )\n      return i;\n  }\n  return 0;\n}\n"
        ],
        "134527795": [
            "sub_804BB33",
            "0x804bb33",
            "unsigned int __usercall sub_804BB33@<eax>(const char *a1@<eax>)\n{\n  if ( a1 )\n    return strlen(a1) + 1;\n  else\n    return 0;\n}\n"
        ],
        "134527822": [
            "sub_804BB4E",
            "0x804bb4e",
            "unsigned __int32 __usercall sub_804BB4E@<eax>(int a1@<eax>)\n{\n  return sub_804A82E(a1, 412, \"Precondition Failed\");\n}\n"
        ],
        "134527849": [
            "sub_804BB69",
            "0x804bb69",
            "int __cdecl sub_804BB69(int a1)\n{\n  return close(*(_DWORD *)(a1 + 344));\n}\n"
        ],
        "134527870": [
            "sub_804BB7E",
            "0x804bb7e",
            "time_t __usercall sub_804BB7E@<eax>(int a1@<eax>)\n{\n  struct tm tp; // [esp+8h] [ebp-34h] BYREF\n\n  memset(&tp, 0, sizeof(tp));\n  if ( strptime(a1, \"%a, %d %b %Y %H:%M:%S %Z\", &tp) )\n    return timegm(&tp);\n  else\n    return 0;\n}\n"
        ],
        "134527936": [
            "sub_804BBC0",
            "0x804bbc0",
            "const char *__usercall sub_804BBC0@<eax>(const char *a1@<eax>)\n{\n  char **i; // ebx\n  const char *v3; // edx\n  unsigned int j; // edi\n  int v5; // eax\n  const char *v7; // [esp+Ch] [ebp-1Ch]\n\n  for ( i = off_804F580; ; i += 2 )\n  {\n    v3 = *i;\n    if ( !*i )\n      break;\n    for ( j = (unsigned int)&a1[strlen(a1) - 1]; j >= (unsigned int)a1; --j )\n    {\n      if ( (unsigned __int8)(*(_BYTE *)j - 46) <= 1u )\n      {\n        v7 = v3;\n        v5 = strcasecmp((const char *)(j + 1), v3);\n        v3 = v7;\n        if ( !v5 )\n          return i[1];\n      }\n    }\n  }\n  return \"application/octet-stream\";\n}\n"
        ],
        "134528037": [
            "sub_804BC25",
            "0x804bc25",
            "int __cdecl sub_804BC25(int a1)\n{\n  int v1; // edi\n  int result; // eax\n  ssize_t v3; // eax\n  int v4; // esi\n\n  v1 = *(_DWORD *)(a1 + 344);\n  while ( 1 )\n  {\n    result = *(_DWORD *)(a1 + 16);\n    if ( *(int *)(result + 52) > 255 )\n      return result;\n    v3 = read(v1, dest, 0x1000u);\n    v4 = v3;\n    if ( v3 >= 0 )\n    {\n      if ( !v3 )\n        return sub_804A91C(a1);\nLABEL_8:\n      sub_804B63A(a1, (int)dest, v4);\n    }\n    else if ( *__errno_location() != 4 )\n    {\n      goto LABEL_8;\n    }\n  }\n}\n"
        ],
        "134528148": [
            "sub_804BC94",
            "0x804bc94",
            "int __cdecl sub_804BC94(int a1, int a2)\n{\n  unsigned __int8 v2; // dl\n  unsigned __int8 v3; // al\n\n  v2 = (*(_BYTE *)(*(_DWORD *)a1 + 18) & 4) != 0;\n  v3 = (*(_BYTE *)(*(_DWORD *)a2 + 18) & 4) != 0;\n  if ( v2 == v3 )\n    return alphasort64();\n  else\n    return v3 - v2;\n}\n"
        ],
        "134528199": [
            "sub_804BCC7",
            "0x804bcc7",
            "int __usercall sub_804BCC7@<eax>(int a1@<eax>, int a2@<edx>)\n{\n  int v2; // eax\n\n  v2 = *(_DWORD *)(a1 + 4 * a2);\n  if ( v2 )\n    return sub_804BABF(v2);\n  else\n    return 0;\n}\n"
        ],
        "134528219": [
            "sub_804BCDB",
            "0x804bcdb",
            "int __usercall sub_804BCDB@<eax>(int a1@<eax>, int (__cdecl *a2)(int, int, int, int)@<edx>, int a3@<ecx>)\n{\n  int v6; // eax\n  int v7; // edx\n\n  v6 = sub_804BABF(*(_DWORD *)(a1 + 276) + 4);\n  ++dword_80554A0;\n  return a2(a1, v6, a3, v7);\n}\n"
        ],
        "134528271": [
            "sub_804BD0F",
            "0x804bd0f",
            "void *__usercall sub_804BD0F@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, const char **a5)\n{\n  void *result; // eax\n  unsigned int v6; // edi\n  unsigned int v7; // esi\n  unsigned int v8; // ebx\n  unsigned int v9; // eax\n  int v10; // edx\n  int v11; // ecx\n  _DWORD *v12; // ebx\n  const char *v13; // eax\n  const char *v14; // eax\n  const char *v15; // eax\n  const char *v16; // eax\n  const char *v17; // eax\n  const char *v18; // eax\n  unsigned int v19; // [esp+4h] [ebp-44h]\n  char *dest; // [esp+18h] [ebp-30h] BYREF\n  char *v23; // [esp+1Ch] [ebp-2Ch] BYREF\n  char *v24; // [esp+20h] [ebp-28h] BYREF\n  char *v25; // [esp+24h] [ebp-24h] BYREF\n  char *v26; // [esp+28h] [ebp-20h] BYREF\n  char *v27; // [esp+2Ch] [ebp-1Ch] BYREF\n\n  if ( !*(_BYTE *)(a2 + 8) )\n    return (void *)(*(int (__cdecl **)(int, int, const char **, int))(a2 + 20))(a1, a3, a5, a4);\n  if ( dword_80533C4 > dword_80554A0 )\n  {\n    *(_DWORD *)(a1 + 332) = sub_804BF36;\n    return (void *)sub_804BCDB(a1, *(int (__cdecl **)(int, int, int, int))(a2 + 20), (int)a5);\n  }\n  else\n  {\n    *(_DWORD *)(a1 + 332) = sub_804BFBF;\n    if ( a5 )\n    {\n      v6 = sub_804BB33(a5[5]);\n      v7 = sub_804BB33(a5[4]);\n      v19 = sub_804BB33(a5[3]);\n      v8 = sub_804BB33(a5[2]);\n      sub_804BB33(a5[1]);\n      v9 = sub_804BB33(*a5);\n      v12 = (_DWORD *)__calloc_a(148, &dest, v9, &v23, v10, &v24, v8, &v25, v19, &v26, v7, &v27, v6, 0, 0, v11);\n      qmemcpy(v12 + 4, a5, 0x80u);\n      v13 = *a5;\n      *((_BYTE *)v12 + 145) = 1;\n      if ( v13 )\n        v12[4] = strcpy(dest, v13);\n      v14 = a5[1];\n      if ( v14 )\n        v12[5] = strcpy(v23, v14);\n      v15 = a5[2];\n      if ( v15 )\n        v12[6] = strcpy(v24, v15);\n      v16 = a5[3];\n      if ( v16 )\n        v12[7] = strcpy(v25, v16);\n      v17 = a5[4];\n      if ( v17 )\n        v12[8] = strcpy(v26, v17);\n      v18 = a5[5];\n      if ( v18 )\n        v12[9] = strcpy(v27, v18);\n    }\n    else\n    {\n      v12 = calloc(1u, 0x94u);\n    }\n    *(_DWORD *)(a1 + 328) = v12;\n    *(_BYTE *)(a1 + 336) = 1;\n    v12[3] = a1;\n    v12[2] = a2;\n    result = off_8053208;\n    *((_DWORD *)off_8053208 + 1) = v12;\n    *v12 = result;\n    v12[1] = &off_8053208;\n    off_8053208 = v12;\n  }\n  return result;\n}\n"
        ],
        "134528765": [
            "sub_804BEFD",
            "0x804befd",
            "char *__usercall sub_804BEFD@<eax>(int a1@<eax>, char *a2@<edx>)\n{\n  snprintf(a2, 0x80u, \"\\\"%llx-%llx-%llx\\\"\", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 44), (__int64)*(int *)(a1 + 72));\n  return a2;\n}\n"
        ],
        "134528822": [
            "sub_804BF36",
            "0x804bf36",
            "_DWORD *__usercall sub_804BF36@<eax>(int a1@<edi>)\n{\n  _DWORD *result; // eax\n  int v2; // edx\n  int v3; // ebx\n  int v4; // ecx\n\n  result = off_8053208;\n  --dword_80554A0;\n  for ( ; off_8053208 != &off_8053208; result = off_8053208 )\n  {\n    if ( dword_80533C4 <= dword_80554A0 )\n      break;\n    v2 = *result;\n    v3 = result[3];\n    *(_DWORD *)(v2 + 4) = result[1];\n    *(_DWORD *)result[1] = v2;\n    result[1] = 0;\n    *result = 0;\n    *((_BYTE *)result + 144) = 1;\n    v4 = 0;\n    *(_BYTE *)(v3 + 336) = 0;\n    if ( *((_BYTE *)result + 145) )\n      v4 = (int)(result + 4);\n    sub_804BCDB(v3, *(int (__cdecl **)(int, int, int, int))(result[2] + 20), v4);\n    sub_804AC14(a1, v3);\n  }\n  return result;\n}\n"
        ],
        "134528959": [
            "sub_804BFBF",
            "0x804bfbf",
            "void __usercall sub_804BFBF(int a1@<edi>, int a2)\n{\n  _DWORD *v2; // ebx\n  int v3; // eax\n\n  v2 = *(_DWORD **)(a2 + 328);\n  if ( *((_BYTE *)v2 + 144) )\n  {\n    sub_804BF36(a1);\n  }\n  else\n  {\n    v3 = *v2;\n    *(_DWORD *)(v3 + 4) = v2[1];\n    *(_DWORD *)v2[1] = v3;\n  }\n  free(v2);\n}\n"
        ],
        "134529021": [
            "sub_804BFFD",
            "0x804bffd",
            "int __usercall sub_804BFFD@<eax>(_DWORD *a1@<eax>, int a2@<edx>)\n{\n  char *v4; // eax\n  struct tm *v5; // eax\n  struct tm *v6; // eax\n  time_t timer; // [esp+8h] [ebp-A0h] BYREF\n  time_t v9; // [esp+Ch] [ebp-9Ch] BYREF\n  char s[152]; // [esp+10h] [ebp-98h] BYREF\n\n  if ( a2 )\n  {\n    v4 = sub_804BEFD(a2, s);\n    ustream_printf(*a1, \"ETag: %s\\r\\n\", v4);\n    timer = *(_DWORD *)(a2 + 72);\n    v5 = gmtime(&timer);\n    strftime(s, 0x80u, \"%a, %d %b %Y %H:%M:%S GMT\", v5);\n    ustream_printf(*a1, \"Last-Modified: %s\\r\\n\", s);\n  }\n  v9 = time(0);\n  v6 = gmtime(&v9);\n  strftime(s, 0x80u, \"%a, %d %b %Y %H:%M:%S GMT\", v6);\n  return ustream_printf(*a1, \"Date: %s\\r\\n\", s);\n}\n"
        ],
        "134529203": [
            "sub_804C0B3",
            "0x804c0b3",
            "void **__cdecl sub_804C0B3(void *a1)\n{\n  void **result; // eax\n  void **v2; // edx\n\n  result = (void **)calloc(1u, 0xCu);\n  result[2] = a1;\n  v2 = off_805321C[0];\n  *result = &off_8053218;\n  off_805321C[0] = result;\n  result[1] = v2;\n  *v2 = result;\n  return result;\n}\n"
        ],
        "134529251": [
            "sub_804C0E3",
            "0x804c0e3",
            "int *__cdecl sub_804C0E3(int a1, char *s)\n{\n  char *v3; // eax\n  int v4; // edx\n  unsigned int v5; // kr08_4\n  unsigned int v6; // esi\n  int v7; // eax\n  char v8; // al\n  char *v9; // eax\n  char *v10; // eax\n  char *v11; // edx\n  char v12; // cl\n  char v13; // bl\n  char v14; // bl\n  char v15; // bl\n  char v16; // al\n  char *v17; // eax\n  unsigned int v18; // ecx\n  char *v19; // ebx\n  unsigned int v20; // ecx\n  const char *v21; // eax\n  const char *v22; // edx\n  const char *i; // esi\n  _BOOL4 v24; // [esp+0h] [ebp-88h]\n  char v25; // [esp+4h] [ebp-84h]\n  char *src; // [esp+8h] [ebp-80h]\n  unsigned int n; // [esp+Ch] [ebp-7Ch]\n  char v28[120]; // [esp+10h] [ebp-78h] BYREF\n\n  src = ::src;\n  n = strlen(::src);\n  if ( !s )\n    return 0;\n  memset(&dword_8055420, 0, 0x80u);\n  resolved[0] = 0;\n  ::s = 0;\n  strcpy(dest, ::src);\n  v3 = strchr(s, 63);\n  if ( !v3 )\n  {\n    v7 = sub_804B7E6(n + 134567584, 4095 - n, (int)s, strlen(s));\nLABEL_11:\n    if ( v7 < 0 )\n      return 0;\n    goto LABEL_7;\n  }\n  v4 = 0;\n  if ( v3[1] )\n    v4 = (int)(v3 + 1);\n  dword_8055430 = v4;\n  if ( s < v3 )\n  {\n    v7 = sub_804B7E6(n + 134567584, 4095 - n, (int)s, v3 - s);\n    goto LABEL_11;\n  }\nLABEL_7:\n  v5 = strlen(dest) + 1;\n  v6 = v5 - 1;\n  v24 = v5 != 1 && byte_805569F[v6] == 47;\n  if ( v6 > 0xFFF )\n    v6 = 4095;\n  while ( 1 )\n  {\n    v8 = dest[v6];\n    v25 = v8;\n    if ( !v8 || v8 == 47 )\n    {\n      dest[v6] = 0;\n      if ( dword_80533AC )\n      {\n        v9 = realpath(dest, resolved);\n        goto LABEL_43;\n      }\n      v10 = resolved;\n      v11 = dest;\n      while ( 1 )\n      {\n        v12 = *v11;\n        if ( v11 >= byte_805669E || !v12 )\n          break;\n        if ( v12 != 47 )\n          goto LABEL_36;\n        v13 = v11[1];\n        if ( v13 == 47 )\n        {\n          ++v11;\n        }\n        else\n        {\n          if ( v13 != 46 )\n            goto LABEL_36;\n          v14 = v11[2];\n          if ( v14 != 47 && v14 )\n          {\n            if ( v14 == 46 && ((v15 = v11[3], v15 == 47) || !v15) )\n            {\n              do\n              {\n                if ( v10 <= resolved )\n                  break;\n                --v10;\n              }\n              while ( *v10 != 47 );\n              v11 += 3;\n            }\n            else\n            {\nLABEL_36:\n              *v10 = v12;\n              ++v11;\n              ++v10;\n            }\n          }\n          else\n          {\n            v11 += 2;\n          }\n        }\n      }\n      if ( v10 > &resolved[1] && *(v10 - 1) == 47 )\n      {\n        --v10;\n      }\n      else if ( v10 == resolved )\n      {\n        *v10 = 47;\n        v10 = &resolved[1];\n      }\n      *v10 = 0;\n      v9 = resolved;\nLABEL_43:\n      dest[v6] = v25;\n      if ( v9 )\n      {\n        if ( !stat64(resolved, &unk_805543C, v9, v9) )\n          break;\n      }\n    }\n    if ( --v6 == -1 )\n      goto LABEL_47;\n  }\n  snprintf(&::s, 0x1000u, \"%s\", (const char *)(v6 + 134567584));\nLABEL_47:\n  if ( strncmp(resolved, src, n) )\n    return 0;\n  v16 = resolved[n];\n  if ( v16 )\n  {\n    if ( v16 != 47 )\n      return 0;\n  }\n  if ( (dword_805544C & 0x8000) != 0 )\n  {\n    dword_8055420 = (int)src;\n    dword_8055424 = (int)resolved;\n    v17 = 0;\n    dword_8055428 = n + 134562848;\n    if ( ::s )\n      v17 = &::s;\n    dword_805542C = (int)v17;\n    return &dword_8055420;\n  }\n  if ( (dword_805544C & 0x4000) == 0 || ::s )\n    return 0;\n  v18 = strlen(resolved) + 1;\n  v19 = (char *)&unk_805441F + v18;\n  v20 = v18 - 1;\n  if ( *(v19 - 1) != 47 )\n  {\n    *(_WORD *)&resolved[v20] = 47;\n    ++v19;\n  }\n  if ( v24 )\n  {\n    for ( i = (const char *)off_8053218; i != (const char *)&off_8053218; i = *(const char **)i )\n    {\n      if ( strlen(*((const char **)i + 2)) <= &unk_805541F - (_UNKNOWN *)v19 )\n      {\n        strcpy(v19, *((const char **)i + 2));\n        if ( !stat64(resolved, v28, 0, 0) && v28[17] < 0 )\n        {\n          qmemcpy(&unk_805543C, v28, 0x60u);\n          break;\n        }\n        *v19 = 0;\n      }\n    }\n    dword_8055420 = (int)src;\n    dword_8055424 = (int)resolved;\n    dword_8055428 = n + 134562848;\n  }\n  else\n  {\n    sub_804A82E(a1, 302, \"Found\");\n    if ( !(unsigned __int8)sub_804B5F8(a1) )\n      ustream_printf(*(_DWORD *)(a1 + 16), \"Content-Length: 0\\r\\n\", v19, v19);\n    v21 = (const char *)dword_8055430;\n    v22 = \"?\";\n    if ( !dword_8055430 )\n    {\n      v21 = \"Usage: %s -p [addr:]port -h docroot\\n\"\n            \"\\t-f              Do not fork to background\\n\"\n            \"\\t-c file         Configuration file, default is '/etc/httpd.conf'\\n\"\n            \"\\t-p [addr:]port  Bind to specified address and port, multiple allowed\\n\"\n            \"\\t-h directory    Specify the document root, default is '.'\\n\"\n            \"\\t-E string       Use given virtual URL as 404 error handler\\n\"\n            \"\\t-I string       Use given filename as index for directories, multiple allowed\\n\"\n            \"\\t-S              Do not follow symbolic links outside of the docroot\\n\"\n            \"\\t-D              Do not allow directory listings, send 403 instead\\n\"\n            \"\\t-R              Enable RFC1918 filter\\n\"\n            \"\\t-n count        Maximum allowed number of concurrent script requests\\n\"\n            \"\\t-N count        Maximum allowed number of concurrent connections\\n\"\n            \"\\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\\n\"\n            \"\\t-y alias[=path]\\tURL alias handle\\n\"\n            \"\\t-i .ext=path    Use interpreter at path for files with the given extension\\n\"\n            \"\\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\\n\"\n            \"\\t-T seconds      Network timeout in seconds, default is 30\\n\"\n            \"\\t-k seconds      HTTP keepalive timeout\\n\"\n            \"\\t-d string       URL decode given string\\n\"\n            \"\\t-r string       Specify basic auth realm\\n\"\n            \"\\t-m string       MD5 crypt given string\\n\"\n            \"\\n\"\n          + 1200;\n      v22 = \"Usage: %s -p [addr:]port -h docroot\\n\"\n            \"\\t-f              Do not fork to background\\n\"\n            \"\\t-c file         Configuration file, default is '/etc/httpd.conf'\\n\"\n            \"\\t-p [addr:]port  Bind to specified address and port, multiple allowed\\n\"\n            \"\\t-h directory    Specify the document root, default is '.'\\n\"\n            \"\\t-E string       Use given virtual URL as 404 error handler\\n\"\n            \"\\t-I string       Use given filename as index for directories, multiple allowed\\n\"\n            \"\\t-S              Do not follow symbolic links outside of the docroot\\n\"\n            \"\\t-D              Do not allow directory listings, send 403 instead\\n\"\n            \"\\t-R              Enable RFC1918 filter\\n\"\n            \"\\t-n count        Maximum allowed number of concurrent script requests\\n\"\n            \"\\t-N count        Maximum allowed number of concurrent connections\\n\"\n            \"\\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\\n\"\n            \"\\t-y alias[=path]\\tURL alias handle\\n\"\n            \"\\t-i .ext=path    Use interpreter at path for files with the given extension\\n\"\n            \"\\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\\n\"\n            \"\\t-T seconds      Network timeout in seconds, default is 30\\n\"\n            \"\\t-k seconds      HTTP keepalive timeout\\n\"\n            \"\\t-d string       URL decode given string\\n\"\n            \"\\t-r string       Specify basic auth realm\\n\"\n            \"\\t-m string       MD5 crypt given string\\n\"\n            \"\\n\"\n          + 1200;\n    }\n    ustream_printf(*(_DWORD *)(a1 + 16), \"Location: %s%s%s\\r\\n\\r\\n\", (const char *)(n + 134562848), v22, v21);\n    sub_804A91C(a1);\n    byte_8055438 = 1;\n  }\n  return &dword_8055420;\n}\n"
        ],
        "134530291": [
            "sub_804C4F3",
            "0x804c4f3",
            "char __usercall sub_804C4F3@<al>(int a1@<eax>, char *a2@<edx>)\n{\n  int *v4; // eax\n  int v5; // esi\n  void **v6; // eax\n  char v8; // [esp+17h] [ebp-39h]\n  int v9[12]; // [esp+20h] [ebp-30h] BYREF\n\n  v4 = sub_804C0E3(a1, a2);\n  if ( !v4 )\n    return 0;\n  v5 = (int)v4;\n  if ( *((_BYTE *)v4 + 24) )\n    return 1;\n  blobmsg_parse(\n    &off_804F540,\n    6,\n    v9,\n    *(_DWORD *)(a1 + 276) + 4,\n    (_byteswap_ulong(**(_DWORD **)(a1 + 276)) & 0xFFFFFF) - 4);\n  if ( v9[0] )\n    *(_DWORD *)(v5 + 20) = sub_804BABF(v9[0]);\n  v8 = sub_804CF0C(a1, v5);\n  if ( !v8 )\n    return 1;\n  v6 = sub_804BADF((int)a2, v5);\n  if ( v6 )\n    sub_804BD0F(a1, (int)v6, (int)a2, a1, (const char **)v5);\n  else\n    sub_804C5B7(v9);\n  return v8;\n}\n"
        ],
        "134530487": [
            "sub_804C5B7",
            "0x804c5b7",
            "char __usercall sub_804C5B7@<al>(int a1@<eax>, const char *a2@<edx>, int a3@<ecx>, int a4)\n{\n  int v5; // eax\n  const char *v7; // eax\n  int v8; // eax\n  char *v9; // eax\n  const char *v10; // edx\n  unsigned int i; // ebx\n  const char *v12; // eax\n  char v13; // cl\n  int v14; // eax\n  int v15; // ebx\n  int v16; // eax\n  char *v17; // eax\n  const char *v18; // edx\n  unsigned int j; // ebx\n  const char *v20; // eax\n  char v21; // cl\n  unsigned __int32 v22; // eax\n  int v23; // eax\n  const char *v24; // eax\n  char result; // al\n  int v26; // ebx\n  void **v27; // edi\n  char *v28; // eax\n  const char *v29; // ebx\n  struct tm *v30; // eax\n  const char *v31; // edx\n  const char *v32; // edi\n  void *v33; // esp\n  char *v34; // [esp-8h] [ebp-140h]\n  char *v35; // [esp-4h] [ebp-13Ch]\n  double v36; // [esp+0h] [ebp-138h] BYREF\n  void **v37; // [esp+Ch] [ebp-12Ch]\n  char *v38; // [esp+10h] [ebp-128h]\n  char *s2; // [esp+14h] [ebp-124h]\n  char *s1; // [esp+18h] [ebp-120h]\n  int fd; // [esp+1Ch] [ebp-11Ch]\n  char *dest; // [esp+20h] [ebp-118h]\n  const char *v43; // [esp+24h] [ebp-114h]\n  double v44; // [esp+28h] [ebp-110h]\n  void *ptr; // [esp+38h] [ebp-100h] BYREF\n  time_t timer; // [esp+3Ch] [ebp-FCh] BYREF\n  char v47[16]; // [esp+40h] [ebp-F8h] BYREF\n  int v48; // [esp+50h] [ebp-E8h]\n  __int64 v49; // [esp+6Ch] [ebp-CCh]\n  time_t v50; // [esp+88h] [ebp-B0h]\n  char s[152]; // [esp+A0h] [ebp-98h] BYREF\n\n  v5 = *(_DWORD *)(a3 + 44);\n  v43 = (const char *)a3;\n  if ( (v5 & 4) == 0 )\n    goto LABEL_51;\n  if ( (v5 & 0x8000) != 0 )\n  {\n    fd = open64(*(_DWORD *)(a3 + 4), 0, v5, v5);\n    if ( fd >= 0 )\n    {\n      v7 = v43;\n      *(_BYTE *)(a1 + 230) = 1;\n      *(_DWORD *)(a1 + 340) = a4;\n      dest = (char *)(v7 + 28);\n      if ( !*(_BYTE *)(a1 + 337) )\n      {\n        v8 = sub_804BCC7(a4, 1);\n        if ( v8 && sub_804BB7E(v8) >= *((_DWORD *)v43 + 25) )\n        {\nLABEL_28:\n          sub_804A82E(a1, 304, \"Not Modified\");\n          v22 = sub_804BFFD((_DWORD *)(a1 + 16), (int)dest);\nLABEL_32:\n          ustream_printf(*(_DWORD *)(a1 + 16), \"\\r\\n\", v22, v22);\n          sub_804A91C(a1);\n          goto LABEL_35;\n        }\n        s2 = sub_804BEFD((int)dest, s);\n        v9 = (char *)sub_804BCC7(*(_DWORD *)(a1 + 340), 3);\n        v10 = v9;\n        if ( v9 )\n        {\n          s1 = v9;\n          for ( i = 0; i < strlen(v10); ++i )\n          {\n            v12 = &v10[i];\n            v13 = v10[i];\n            if ( v13 == 32 || v13 == 44 )\n            {\n              ++i;\n              *v12 = 0;\n              s1 = (char *)&v10[i];\n            }\n            else\n            {\n              v38 = (char *)v10;\n              if ( !strcmp(s1, \"*\") )\n                goto LABEL_16;\n              v14 = strcmp(s1, s2);\n              v10 = v38;\n              if ( !v14 )\n                goto LABEL_16;\n            }\n          }\n          goto LABEL_29;\n        }\nLABEL_16:\n        v15 = *(_DWORD *)(a1 + 340);\n        if ( sub_804BCC7(v15, 5) || (v16 = sub_804BCC7(v15, 2)) != 0 && sub_804BB7E(v16) <= *((_DWORD *)v43 + 25) )\n        {\nLABEL_29:\n          v22 = sub_804BB4E(a1);\n          goto LABEL_32;\n        }\n        s2 = sub_804BEFD((int)dest, s);\n        v17 = (char *)sub_804BCC7(*(_DWORD *)(a1 + 340), 4);\n        v18 = v17;\n        if ( v17 )\n        {\n          s1 = v17;\n          for ( j = 0; j < strlen(v18); ++j )\n          {\n            v20 = &v18[j];\n            v21 = v18[j];\n            if ( v21 == 32 || v21 == 44 )\n            {\n              ++j;\n              *v20 = 0;\n              s1 = (char *)&v18[j];\n            }\n            else\n            {\n              v38 = (char *)v18;\n              if ( !strcmp(s1, \"*\") || (v23 = strcmp(s1, s2), v18 = v38, !v23) )\n              {\n                if ( (*(_DWORD *)(a1 + 208) & 0xFFFFFFFD) != 0 )\n                  goto LABEL_29;\n                goto LABEL_28;\n              }\n            }\n          }\n        }\n      }\n      sub_804A82E(a1, 200, \"OK\");\n      sub_804BFFD((_DWORD *)(a1 + 16), (int)dest);\n      v24 = sub_804BBC0(*((const char **)v43 + 2));\n      ustream_printf(*(_DWORD *)(a1 + 16), \"Content-Type: %s\\r\\n\", v24);\n      ustream_printf(*(_DWORD *)(a1 + 16), \"Content-Length: %llu\\r\\n\\r\\n\", *((_QWORD *)v43 + 9));\n      if ( *(_DWORD *)(a1 + 208) != 2 )\n      {\n        *(_DWORD *)(a1 + 344) = fd;\n        *(_DWORD *)(a1 + 316) = sub_804BC25;\n        *(_DWORD *)(a1 + 324) = sub_804BB69;\n        *(_DWORD *)(a1 + 320) = sub_804BB69;\n        result = sub_804BC25(a1);\n        goto LABEL_37;\n      }\n      sub_804A91C(a1);\nLABEL_35:\n      result = close(fd);\nLABEL_37:\n      *(_DWORD *)(a1 + 340) = 0;\n      return result;\n    }\n    goto LABEL_51;\n  }\n  if ( (v5 & 0x4000) == 0 || dword_80533B0 )\n  {\nLABEL_51:\n    v31 = dword_805338C;\n    if ( !dword_805338C )\n      return sub_804A9B9(a1, 403, \"Forbidden\", \"You don't have permission to access %s on this server.\", a2);\n    if ( *(_DWORD *)(a1 + 220) == 403 )\n      return sub_804A9B9(a1, 403, \"Forbidden\", \"You don't have permission to access %s on this server.\", a2);\n    v32 = dword_805338C;\n    *(_DWORD *)(a1 + 220) = 403;\n    v33 = alloca(strlen(v32) + 16);\n    strcpy((char *)&v36, v31);\n    result = sub_804C4F3(a1, (char *)&v36);\n    if ( !result )\n      return sub_804A9B9(a1, 403, \"Forbidden\", \"You don't have permission to access %s on this server.\", a2);\n    return result;\n  }\n  ptr = 0;\n  sub_804A82E(a1, 200, \"OK\");\n  sub_804BFFD((_DWORD *)(a1 + 16), 0);\n  ustream_printf(*(_DWORD *)(a1 + 16), \"Content-Type: text/html\\r\\n\\r\\n\");\n  sub_804B799(\n    a1,\n    \"<html><head><title>Index of %s</title></head><body><h1>Index of %s</h1><hr /><ol>\",\n    *((const char **)v43 + 2),\n    *((const char **)v43 + 2));\n  v26 = scandir64(*((_DWORD *)v43 + 1), &ptr, 0, sub_804BC94);\n  if ( v26 > 0 )\n  {\n    strcpy(::dest, *((const char **)v43 + 1));\n    s2 = (char *)*((_DWORD *)v43 + 2);\n    v27 = (void **)ptr;\n    s1 = (char *)1;\n    fd = (int)\"directory\";\n    v43 = \"Chrome/\" + 6;\n    dest = &byte_805569F[strlen(::dest) + 1];\n    v37 = (void **)((char *)ptr + 4 * v26);\n    do\n    {\n      v28 = (char *)*v27;\n      if ( *((_BYTE *)*v27 + 19) != 46 || v28[20] )\n      {\n        v29 = v28 + 19;\n        LOBYTE(v28) = v28[18];\n        LOBYTE(v38) = (_BYTE)v28;\n        v35 = v28;\n        v34 = v28;\n        strcpy(dest, v29);\n        if ( !stat64(::dest, v47, v34, v35) )\n        {\n          if ( ((unsigned __int8)v38 & 4) == 0 )\n          {\n            s1 = (char *)4;\n            fd = (int)sub_804BBC0(::dest);\n            v43 = \"Usage: %s -p [addr:]port -h docroot\\n\"\n                  \"\\t-f              Do not fork to background\\n\"\n                  \"\\t-c file         Configuration file, default is '/etc/httpd.conf'\\n\"\n                  \"\\t-p [addr:]port  Bind to specified address and port, multiple allowed\\n\"\n                  \"\\t-h directory    Specify the document root, default is '.'\\n\"\n                  \"\\t-E string       Use given virtual URL as 404 error handler\\n\"\n                  \"\\t-I string       Use given filename as index for directories, multiple allowed\\n\"\n                  \"\\t-S              Do not follow symbolic links outside of the docroot\\n\"\n                  \"\\t-D              Do not allow directory listings, send 403 instead\\n\"\n                  \"\\t-R              Enable RFC1918 filter\\n\"\n                  \"\\t-n count        Maximum allowed number of concurrent script requests\\n\"\n                  \"\\t-N count        Maximum allowed number of concurrent connections\\n\"\n                  \"\\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\\n\"\n                  \"\\t-y alias[=path]\\tURL alias handle\\n\"\n                  \"\\t-i .ext=path    Use interpreter at path for files with the given extension\\n\"\n                  \"\\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\\n\"\n                  \"\\t-T seconds      Network timeout in seconds, default is 30\\n\"\n                  \"\\t-k seconds      HTTP keepalive timeout\\n\"\n                  \"\\t-d string       URL decode given string\\n\"\n                  \"\\t-r string       Specify basic auth realm\\n\"\n                  \"\\t-m string       MD5 crypt given string\\n\"\n                  \"\\n\"\n                + 1200;\n          }\n          if ( ((unsigned int)s1 & v48) != 0 )\n          {\n            v44 = (double)v49;\n            timer = v50;\n            v36 = v44 * 0.0009765625;\n            v30 = gmtime(&timer);\n            v38 = s;\n            strftime(s, 0x80u, \"%a, %d %b %Y %H:%M:%S GMT\", v30);\n            sub_804B799(\n              a1,\n              \"<li><strong><a href='%s%s%s'>%s</a>%s</strong><br /><small>modified: %s<br />%s - %.02f kbyte<br /><br /></small></li>\",\n              s2,\n              v29,\n              v43,\n              v29,\n              v43,\n              s,\n              (const char *)fd,\n              v36);\n            *dest = 0;\n          }\n        }\n      }\n      free(*v27++);\n    }\n    while ( v27 != v37 );\n  }\n  free(ptr);\n  sub_804B799(a1, \"</ol><hr /></body></html>\");\n  return sub_804A91C(a1);\n}\n"
        ],
        "134532049": [
            "sub_804CBD1",
            "0x804cbd1",
            "int __cdecl sub_804CBD1(int a1)\n{\n  void **v1; // edx\n  int result; // eax\n\n  v1 = off_8053214[0];\n  result = a1;\n  off_8053214[0] = (void **)a1;\n  *(_DWORD *)a1 = &off_8053210;\n  *(_DWORD *)(a1 + 4) = v1;\n  *v1 = (void *)a1;\n  return result;\n}\n"
        ],
        "134532079": [
            "sub_804CBEF",
            "0x804cbef",
            "char __cdecl sub_804CBEF(int a1)\n{\n  char *v1; // esi\n  int i; // edx\n  bool v3; // al\n  int *v4; // edx\n  const char *v5; // edi\n  unsigned int v6; // kr08_4\n  int *v7; // ecx\n  int v8; // edi\n  char *v9; // eax\n  char *v10; // edi\n  const char *v11; // eax\n  char *v12; // eax\n  void **v13; // eax\n  int v14; // ecx\n  int v15; // edx\n  const char *v16; // esi\n  void *v17; // esp\n  const char *v19; // [esp-Ch] [ebp-44h]\n  char v20[12]; // [esp+0h] [ebp-38h] BYREF\n  int *v21; // [esp+Ch] [ebp-2Ch]\n  char *src[7]; // [esp+1Ch] [ebp-1Ch] BYREF\n\n  src[0] = (char *)sub_804BABF(*(_DWORD *)(a1 + 276) + 4);\n  blob_buf_init(a1 + 292, 0);\n  v1 = src[0];\n  for ( i = dword_80533E0; (int *)i != &dword_80533E0; i = *v21 )\n  {\n    v21 = (int *)i;\n    v3 = sub_804B9E6(*(char **)(i + 8), src[0]);\n    v4 = v21;\n    if ( v3 )\n    {\n      v5 = (const char *)v21[3];\n      v21 = 0;\n      if ( v5 )\n        v21 = (int *)strlen(v5);\n      v6 = strlen(src[0]) + 1;\n      v7 = (int *)dword_80533DC;\n      if ( dword_80533DC < (int)v21 )\n        v7 = v21;\n      v8 = (int)v7 + v6;\n      if ( (int)((int)v7 + v6) > dword_8053404 )\n      {\n        v21 = v4;\n        v9 = (char *)realloc(ptr, (size_t)v7 + v6);\n        dword_8053404 = v8;\n        ptr = v9;\n        v4 = v21;\n      }\n      v10 = ptr;\n      *ptr = 0;\n      v11 = (const char *)v4[3];\n      if ( v11 || (v11 = dword_8053390) != 0 )\n        strcpy(v10, v11);\n      v19 = v1;\n      v1 = v10;\n      strcat(v10, v19);\n      break;\n    }\n  }\n  src[0] = v1;\n  sub_804E341(a1, src, 0, v1);\n  v12 = src[0];\n  if ( src[0] )\n  {\n    *(_DWORD *)(a1 + 220) = 200;\n    v13 = sub_804BADF((int)v12, 0);\n    if ( v13 )\n    {\n      LOBYTE(v12) = (unsigned __int8)sub_804BD0F(a1, (int)v13, (int)src[0], a1, 0);\n    }\n    else\n    {\n      LOBYTE(v12) = sub_804C4F3(a1, src[0]);\n      if ( !(_BYTE)v12 )\n      {\n        v12 = (char *)sub_804E341(a1, src, 1, v14);\n        if ( !v12 || src[0] && (sub_804E341(a1, src, 0, v15), LOBYTE(v12) = sub_804C4F3(a1, src[0]), !(_BYTE)v12) )\n        {\n          v16 = dword_805338C;\n          *(_DWORD *)(a1 + 220) = 404;\n          if ( !v16\n            || (v17 = alloca(strlen(v16) + 16), strcpy(v20, v16), LOBYTE(v12) = sub_804C4F3(a1, v20), !(_BYTE)v12) )\n          {\n            LOBYTE(v12) = sub_804A9B9(\n                            a1,\n                            404,\n                            \"Not Found\",\n                            \"The requested URL %s was not found on this server.\",\n                            src[0]);\n          }\n        }\n      }\n    }\n  }\n  return (char)v12;\n}\n"
        ],
        "134532588": [
            "sub_804CDEC",
            "0x804cdec",
            "char __cdecl sub_804CDEC(char *src, char *a2, char *s1)\n{\n  void *v3; // eax\n  const char *v4; // ebx\n  _DWORD *v5; // esi\n  char *dest; // [esp+4h] [ebp-24h] BYREF\n  char *v8; // [esp+8h] [ebp-20h] BYREF\n  char *v9; // [esp+Ch] [ebp-1Ch] BYREF\n\n  LOBYTE(v3) = 0;\n  v4 = s1;\n  if ( strlen(s1) <= 3\n    || (v3 = (void *)strncmp(s1, \"$p$\", 3u)) != 0\n    || (v3 = getspnam(s1 + 3)) != 0 && (v4 = (const char *)*((_DWORD *)v3 + 1)) != 0\n    || (v3 = getpwnam(s1 + 3)) != 0\n    && (v4 = (const char *)*((_DWORD *)v3 + 1)) != 0\n    && (LOBYTE(v3) = *v4) != 0\n    && (_BYTE)v3 != 33 )\n  {\n    if ( *v4 )\n    {\n      v3 = (void *)__calloc_a(20, &dest, strlen(src) + 1, &v8, strlen(a2) + 1, &v9, strlen(v4) + 1, 0);\n      v5 = v3;\n      if ( v3 )\n      {\n        *((_DWORD *)v3 + 2) = strcpy(dest, src);\n        v5[3] = strcpy(v8, a2);\n        v5[4] = strcpy(v9, v4);\n        v3 = off_8053220;\n        *((_DWORD *)off_8053220 + 1) = v5;\n        *v5 = v3;\n        v5[1] = &off_8053220;\n        off_8053220 = v5;\n      }\n    }\n  }\n  return (char)v3;\n}\n"
        ],
        "134532876": [
            "sub_804CF0C",
            "0x804cf0c",
            "char __cdecl sub_804CF0C(int a1, int a2)\n{\n  const char *v2; // edi\n  char *v3; // eax\n  const char *v4; // eax\n  const char **v5; // esi\n  unsigned int v6; // kr04_4\n  char v7; // al\n  const char *v9; // esi\n  char *v10; // eax\n  signed int v11; // [esp+0h] [ebp-28h]\n  char *s1; // [esp+4h] [ebp-24h]\n  char *key; // [esp+8h] [ebp-20h]\n  char *v14; // [esp+Ch] [ebp-1Ch]\n\n  v2 = *(const char **)(a2 + 20);\n  if ( v2\n    && !strncasecmp(v2, \"Basic \", 6u)\n    && (sub_804B941((int)dest, 4096, (int)(v2 + 6), strlen(v2 + 6)), (v3 = strchr(dest, 58)) != 0) )\n  {\n    *v3 = 0;\n    key = v3 + 1;\n    v14 = dest;\n  }\n  else\n  {\n    key = 0;\n    v14 = 0;\n  }\n  v4 = *(const char **)(a2 + 8);\n  *(_DWORD *)(a1 + 232) = 0;\n  s1 = (char *)v4;\n  v5 = (const char **)off_8053220;\n  v11 = strlen(v4);\n  while ( 1 )\n  {\n    if ( v5 == (const char **)&off_8053220 )\n    {\nLABEL_12:\n      v7 = 0;\n      goto LABEL_15;\n    }\n    v6 = strlen(v5[2]) + 1;\n    if ( v11 >= (int)(v6 - 1) && !strncasecmp(s1, v5[2], v6 - 1) )\n    {\n      *(_DWORD *)(a1 + 232) = v5;\n      if ( !v14 )\n        goto LABEL_12;\n      if ( !strcmp(v14, v5[3]) )\n        break;\n    }\n    v5 = (const char **)*v5;\n  }\n  v7 = 1;\nLABEL_15:\n  if ( !*(_DWORD *)(a1 + 232) )\n    return 1;\n  if ( v7 )\n  {\n    v9 = v5[4];\n    if ( !strcmp(key, v9) )\n      return 1;\n    v10 = crypt(key, v9);\n    if ( !strcmp(v10, v9) )\n      return 1;\n  }\n  sub_804A82E(a1, 401, \"Authorization Required\");\n  ustream_printf(\n    *(_DWORD *)(a1 + 16),\n    \"WWW-Authenticate: Basic realm=\\\"%s\\\"\\r\\nContent-Type: text/plain\\r\\n\\r\\n\",\n    (const char *)dword_8053384);\n  sub_804B799(a1, \"Authorization Required\\n\");\n  sub_804A91C(a1);\n  return 0;\n}\n"
        ],
        "134533274": [
            "sub_804D09A",
            "0x804d09a",
            "int __cdecl sub_804D09A(int a1, int a2)\n{\n  int v2; // esi\n  const char **i; // edi\n  const char *v4; // edx\n  int v5; // edx\n  const char *v6; // eax\n  int *v7; // eax\n  char *v8; // eax\n  const char *v9; // edx\n\n  v2 = *(_DWORD *)(a2 + 124);\n  clearenv();\n  setenv(\"PATH\", value, 1);\n  for ( i = (const char **)sub_804D9F2(a1, a2); *i; i += 2 )\n  {\n    v4 = i[1];\n    if ( v4 )\n      setenv(*i, v4, 1);\n  }\n  if ( !chdir(*(const char **)a2) )\n  {\n    v6 = *(const char **)(a2 + 4);\n    if ( v2 )\n      execl(*(const char **)(v2 + 8), *(const char **)(v2 + 8), v6, 0);\n    else\n      execl(v6, v6, 0, v5);\n  }\n  v7 = __errno_location();\n  v8 = strerror(*v7);\n  if ( v2 )\n    v9 = *(const char **)(v2 + 8);\n  else\n    v9 = *(const char **)(a2 + 4);\n  return printf(\n           \"Status: 500 Internal Server Error\\r\\n\\r\\nUnable to launch the requested CGI program:\\n  %s: %s\\n\",\n           v9,\n           v8);\n}\n"
        ],
        "134533463": [
            "sub_804D157",
            "0x804d157",
            "bool __cdecl sub_804D157(int a1)\n{\n  const char *v1; // ebx\n  unsigned int v2; // kr04_4\n  char *v4; // eax\n  signed int v5; // [esp+8h] [ebp-20h]\n  char *v6; // [esp+Ch] [ebp-1Ch]\n\n  v1 = (const char *)off_8053240;\n  v6 = *(char **)(a1 + 4);\n  v5 = strlen(v6);\n  while ( v1 != (const char *)&off_8053240 )\n  {\n    v2 = strlen(*((const char **)v1 + 3)) + 1;\n    if ( v5 > (int)(v2 - 1) && !strcmp(&v6[v5 - (v2 - 1)], *((const char **)v1 + 3)) )\n    {\n      *(_DWORD *)(a1 + 124) = v1;\n      return 1;\n    }\n    v1 = *(const char **)v1;\n  }\n  v4 = (char *)dword_8053394;\n  *(_DWORD *)(a1 + 124) = 0;\n  return v4 && sub_804B9E6(v4, v6);\n}\n"
        ],
        "134533617": [
            "sub_804D1F1",
            "0x804d1f1",
            "int __cdecl sub_804D1F1(int a1, int a2, int a3)\n{\n  int result; // eax\n  int *v4; // eax\n  char *v5; // [esp-14h] [ebp-18h]\n\n  if ( !*(_DWORD *)(a3 + 124) && (*(_DWORD *)(a3 + 44) & 0x8001) != 32769 )\n    return sub_804A9B9(a1, 403, \"Forbidden\", \"You don't have permission to access %s on this server.\", a2);\n  result = sub_804DBAF(a1, a3, a2, sub_804D09A);\n  if ( !(_BYTE)result )\n  {\n    v4 = __errno_location();\n    v5 = strerror(*v4);\n    return sub_804A9B9(a1, 500, \"Internal Server Error\", \"Failed to create CGI process: %s\", v5);\n  }\n  return result;\n}\n"
        ],
        "134533742": [
            "sub_804D26E",
            "0x804d26e",
            "void **__cdecl sub_804D26E(char *src, char *a2)\n{\n  int v2; // ebx\n  void **result; // eax\n  int v4; // [esp+0h] [ebp-20h]\n  int v5; // [esp+4h] [ebp-1Ch]\n  char *dest; // [esp+10h] [ebp-10h] BYREF\n  char *v7; // [esp+14h] [ebp-Ch] BYREF\n\n  v2 = __calloc_a(16, &dest, strlen(src) + 1, &v7, strlen(a2) + 1, 0, v4, v5);\n  *(_DWORD *)(v2 + 12) = strcpy(dest, src);\n  *(_DWORD *)(v2 + 8) = strcpy(v7, a2);\n  result = off_8053244;\n  off_8053244 = (void **)v2;\n  *(_DWORD *)v2 = &off_8053240;\n  *(_DWORD *)(v2 + 4) = result;\n  *result = (void *)v2;\n  return result;\n}\n"
        ],
        "134533863": [
            "sub_804D2E7",
            "0x804d2e7",
            "int __cdecl sub_804D2E7(int a1, int a2)\n{\n  *(_BYTE *)(a1 + 48) = 1;\n  *(_DWORD *)(a1 + 52) = a2;\n  return uloop_timeout_set(a1 + 20, 1);\n}\n"
        ],
        "134533898": [
            "sub_804D30A",
            "0x804d30a",
            "int __cdecl sub_804D30A(int a1)\n{\n  int result; // eax\n\n  result = a1;\n  if ( *(_BYTE *)(a1 + 196) )\n    return uloop_timeout_set(a1 + 168, 1);\n  return result;\n}\n"
        ],
        "134533936": [
            "sub_804D330",
            "0x804d330",
            "int __usercall sub_804D330@<eax>(int a1@<eax>)\n{\n  int v2; // edx\n  int v4; // [esp+14h] [ebp-Ch] BYREF\n\n  *(_BYTE *)(a1 + 197) = 1;\n  *(_BYTE *)(a1 + 130) = 1;\n  ustream_get_read_buf(a1, &v4);\n  if ( v4 )\n    ustream_consume(a1, v4, v2, v2);\n  return uloop_timeout_set(a1 + 72, 0);\n}\n"
        ],
        "134534012": [
            "sub_804D37C",
            "0x804d37c",
            "char __usercall sub_804D37C@<al>(char *a1@<edi>, int a2)\n{\n  const char *buf; // eax\n  char *v3; // eax\n  int v4; // esi\n  int (__cdecl *v5)(int); // eax\n  char *v6; // eax\n  int v7; // edx\n  int v8; // eax\n  char *v10; // [esp-8h] [ebp-40h]\n  int v11; // [esp-4h] [ebp-3Ch]\n  int v12; // [esp+8h] [ebp-30h]\n  int v13; // [esp+Ch] [ebp-2Ch]\n  int v14[7]; // [esp+1Ch] [ebp-1Ch] BYREF\n\n  v13 = *(_DWORD *)(a2 + 192);\n  v12 = *(_DWORD *)(v13 + 16);\n  if ( *(_BYTE *)(a2 + 196) )\n    uloop_timeout_set(a2 + 168, 1);\n  if ( !*(_BYTE *)(a2 + 197) && *(_DWORD *)(a2 + 208) )\n  {\n    while ( *(_DWORD *)(a2 + 208) )\n    {\n      buf = (const char *)ustream_get_read_buf(a2, v14);\n      a1 = (char *)buf;\n      if ( !buf )\n        break;\n      if ( !v14[0] )\n        break;\n      v3 = strchr(buf, 10);\n      if ( !v3 )\n        break;\n      v4 = v3 + 1 - a1;\n      if ( a1 < v3 && *(v3 - 1) == 13 )\n        --v3;\n      *v3 = 0;\n      if ( a1 == v3 )\n      {\n        v5 = *(int (__cdecl **)(int))(a2 + 212);\n        *(_DWORD *)(a2 + 208) = 0;\n        if ( v5 )\n          v5 = (int (__cdecl *)(int))v5(a2);\n        ustream_consume(a2, v4, v5, v5);\n        break;\n      }\n      v6 = sub_804BA46(a1);\n      if ( !v6 )\n      {\n        sub_804D330(a2);\n        break;\n      }\n      v11 = v7;\n      v10 = v6;\n      (*(void (__cdecl **)(int))(a2 + 208))(a2);\n      ustream_consume(a2, v4, v10, v11);\n    }\n  }\n  LOBYTE(v8) = *(_BYTE *)(a2 + 130);\n  if ( *(_DWORD *)(a2 + 208) )\n  {\n    if ( (_BYTE)v8 )\n      LOBYTE(v8) = sub_804D330(a2);\n  }\n  else if ( (_BYTE)v8 || !*(_DWORD *)(v12 + 52) )\n  {\n    v8 = ustream_get_read_buf(a2, v14);\n    if ( v8 && v14[0] )\n    {\n      if ( !*(_BYTE *)(a2 + 198) )\n        v8 = sub_804B63A(v13, v8, v14[0]);\n      LOBYTE(v8) = ustream_consume(a2, v14[0], v8, v8);\n    }\n  }\n  else\n  {\n    LOBYTE(v8) = ustream_set_read_blocked(a2, 1, a1, a1);\n  }\n  return v8;\n}\n"
        ],
        "134534400": [
            "sub_804D500",
            "0x804d500",
            "int __cdecl sub_804D500(int a1)\n{\n  int result; // eax\n\n  if ( *(_DWORD *)(a1 + 192) )\n  {\n    if ( *(_BYTE *)(a1 + 156) )\n      kill(*(_DWORD *)(a1 + 164), 9);\n    uloop_timeout_cancel(a1 + 168);\n    uloop_process_delete(a1 + 148);\n    ustream_free(a1);\n    result = close(*(_DWORD *)(a1 + 140));\n    *(_DWORD *)(a1 + 192) = 0;\n  }\n  return result;\n}\n"
        ],
        "134534511": [
            "sub_804D56F",
            "0x804d56f",
            "int (*__cdecl sub_804D56F(int (*a1)(void)))(void)\n{\n  int (*result)(void); // eax\n\n  result = a1;\n  if ( *((_DWORD *)a1 + 25) )\n  {\n    *((_DWORD *)a1 + 25) = 0;\n    *((_DWORD *)a1 + 26) = 0;\n    *((_DWORD *)a1 + 27) = 0;\n    result = (int (*)(void))*((_DWORD *)a1 + 54);\n    if ( result )\n      return (int (*)(void))result();\n  }\n  return result;\n}\n"
        ],
        "134534559": [
            "sub_804D59F",
            "0x804d59f",
            "int (*__cdecl sub_804D59F(int a1))(void)\n{\n  int (*result)(void); // eax\n\n  do\n  {\n    result = *(int (**)(void))(a1 - 44);\n    if ( !result )\n      break;\n    result = (int (*)(void))((int (__cdecl *)(int))result)(a1 - 168);\n  }\n  while ( (_BYTE)result );\n  if ( (*(_BYTE *)(a1 + 28) || *(_BYTE *)(a1 - 38)) && !*(_DWORD *)(a1 - 152) )\n    return sub_804D56F((int (*)(void))(a1 - 168));\n  return result;\n}\n"
        ],
        "134534635": [
            "sub_804D5EB",
            "0x804d5eb",
            "int __cdecl sub_804D5EB(int a1, int a2)\n{\n  kill(*(_DWORD *)(a2 + 164), 9);\n  *(_BYTE *)(a2 + 130) = 1;\n  return uloop_timeout_set(a2 + 72, 0);\n}\n"
        ],
        "134534684": [
            "sub_804D61C",
            "0x804d61c",
            "int __cdecl sub_804D61C(int a1, int a2, int a3, int a4)\n{\n  int result; // eax\n\n  *(_DWORD *)(a2 + 192) = a1;\n  *(_DWORD *)(a2 + 100) = sub_804D37C;\n  *(_DWORD *)(a2 + 108) = sub_804D30A;\n  *(_BYTE *)(a2 + 128) = 1;\n  ustream_fd_init(a2, a3);\n  *(_DWORD *)(a2 + 160) = sub_804D2E7;\n  *(_DWORD *)(a2 + 164) = a4;\n  result = uloop_process_add(a2 + 148);\n  *(_DWORD *)(a2 + 180) = sub_804D59F;\n  return result;\n}\n"
        ],
        "134534784": [
            "sub_804D680",
            "0x804d680",
            "int __usercall sub_804D680@<eax>(int a1@<eax>)\n{\n  int v1; // ecx\n  unsigned __int16 v2; // dx\n\n  v1 = a1 + 4;\n  if ( *(char *)a1 < 0 )\n  {\n    HIBYTE(v2) = *(_WORD *)(a1 + 4);\n    LOBYTE(v2) = HIBYTE(*(_WORD *)(a1 + 4));\n    v1 += (v2 + 6) & 0xFFFFFFFC;\n  }\n  return v1;\n}\n"
        ],
        "134534816": [
            "sub_804D6A0",
            "0x804d6a0",
            "int __cdecl sub_804D6A0(int a1)\n{\n  int result; // eax\n\n  close(*(_DWORD *)(a1 + 532));\n  result = *(_DWORD *)(a1 + 384);\n  if ( result >= 0 )\n    return close(*(_DWORD *)(a1 + 384));\n  return result;\n}\n"
        ],
        "134534867": [
            "sub_804D6D3",
            "0x804d6d3",
            "int __cdecl sub_804D6D3(int a1)\n{\n  return sub_804D5EB(a1 - 340, a1 + 52);\n}\n"
        ],
        "134534896": [
            "sub_804D6F0",
            "0x804d6f0",
            "void __usercall sub_804D6F0(int a1@<edi>, int a2)\n{\n  sub_804AC14(a1, a2 - 380);\n}\n"
        ],
        "134534912": [
            "sub_804D700",
            "0x804d700",
            "char *__cdecl sub_804D700(int a1, char *s1, char *s)\n{\n  int v3; // ebx\n  char *result; // eax\n  char nptr[2]; // [esp+14h] [ebp-1Ch] BYREF\n  char v6; // [esp+16h] [ebp-1Ah]\n  char v7; // [esp+17h] [ebp-19h]\n\n  v3 = *(_DWORD *)(a1 + 192);\n  if ( strcmp(s1, \"Status\") )\n    return (char *)blobmsg_add_field(v3 + 364, 3, s1, s, strlen(s) + 1);\n  result = strchr(s, 32);\n  if ( result == s + 3 )\n  {\n    *(_WORD *)nptr = *(_WORD *)s;\n    v6 = s[2];\n    v7 = 0;\n    snprintf(byte_80554C0, 0x40u, \"%s\", s + 4);\n    *(_DWORD *)(v3 + 616) = byte_80554C0;\n    result = (char *)atoi(nptr);\n    *(_DWORD *)(v3 + 612) = result;\n  }\n  return result;\n}\n"
        ],
        "134535089": [
            "sub_804D7B1",
            "0x804d7b1",
            "int __cdecl sub_804D7B1(int a1, char *buf, size_t n)\n{\n  int v3; // esi\n  ssize_t v6; // eax\n\n  v3 = 0;\n  while ( n )\n  {\n    v6 = write(*(_DWORD *)(a1 + 384), buf, n);\n    if ( v6 >= 0 )\n    {\n      if ( !v6 )\n      {\nLABEL_9:\n        uloop_fd_add(a1 + 380, 2, v6, v6);\n        return v3;\n      }\nLABEL_8:\n      v3 += v6;\n      n -= v6;\n      buf += v6;\n    }\n    else\n    {\n      v6 = *__errno_location();\n      if ( v6 != 4 )\n      {\n        if ( v6 == 11 )\n          goto LABEL_9;\n        v6 = n;\n        goto LABEL_8;\n      }\n    }\n  }\n  uloop_fd_delete(a1 + 380);\n  return v3;\n}\n"
        ],
        "134535215": [
            "sub_804D82F",
            "0x804d82f",
            "int __cdecl sub_804D82F(int a1)\n{\n  if ( *(_DWORD *)(a1 + 208) )\n    return sub_804A9B9(*(_DWORD *)(a1 + 192), 502, \"Bad Gateway\", \"The process did not produce any response\");\n  else\n    return sub_804A91C(*(_DWORD *)(a1 + 192));\n}\n"
        ],
        "134535274": [
            "sub_804D86A",
            "0x804d86a",
            "int __cdecl sub_804D86A(int a1)\n{\n  int result; // eax\n\n  result = *(_DWORD *)(a1 + 16);\n  if ( !*(_DWORD *)(result + 52) )\n  {\n    ustream_set_read_blocked(a1 + 392, 0, result, *(_DWORD *)(a1 + 16));\n    return (*(int (__cdecl **)(int, _DWORD))(a1 + 492))(a1 + 392, 0);\n  }\n  return result;\n}\n"
        ],
        "134535328": [
            "sub_804D8A0",
            "0x804d8a0",
            "int __cdecl sub_804D8A0(int a1)\n{\n  int result; // eax\n\n  if ( *(int *)(a1 + 384) >= 0 )\n  {\n    uloop_fd_delete(a1 + 380);\n    result = close(*(_DWORD *)(a1 + 384));\n    *(_DWORD *)(a1 + 384) = -1;\n  }\n  return result;\n}\n"
        ],
        "134535390": [
            "sub_804D8DE",
            "0x804d8de",
            "int __cdecl sub_804D8DE(int a1)\n{\n  uloop_timeout_cancel(a1 + 340);\n  blob_buf_free(a1 + 364);\n  sub_804D8A0(a1);\n  return sub_804D500(a1 + 392);\n}\n"
        ],
        "134535455": [
            "sub_804D91F",
            "0x804d91f",
            "int __cdecl sub_804D91F(int a1)\n{\n  int v1; // edi\n  unsigned __int32 v2; // eax\n  unsigned int *v3; // ebx\n  int result; // eax\n  unsigned int v5; // esi\n  int v6; // ebx\n  signed __int32 v7; // esi\n  const char *v8; // eax\n  int v9; // [esp+18h] [ebp-1Ch]\n\n  v1 = *(_DWORD *)(a1 + 192);\n  uloop_timeout_cancel(v1 + 340);\n  v2 = sub_804A82E(v1, *(_DWORD *)(v1 + 612), *(const char **)(v1 + 616));\n  v3 = *(unsigned int **)(v1 + 364);\n  if ( v3 )\n  {\n    v5 = *v3;\n    v6 = (int)(v3 + 1);\n    v7 = (_byteswap_ulong(v5) & 0xFFFFFF) - 4;\n    while ( v7 > 0 )\n    {\n      v2 = ((_byteswap_ulong(*(_DWORD *)v6) & 0xFFFFFF) + 3) & 0xFFFFFFFC;\n      if ( v7 < v2 || v2 <= 3 )\n        break;\n      v9 = *(_DWORD *)(v1 + 16);\n      v8 = (const char *)sub_804D680(v6);\n      ustream_printf(v9, \"%s: %s\\r\\n\", (const char *)(v6 + 6), v8);\n      v2 = ((_byteswap_ulong(*(_DWORD *)v6) & 0xFFFFFF) + 3) & 0xFFFFFFFC;\n      v7 -= v2;\n      v6 += v2;\n    }\n  }\n  result = ustream_printf(*(_DWORD *)(v1 + 16), \"\\r\\n\", v2, v2);\n  if ( *(_DWORD *)(v1 + 208) == 2 )\n  {\n    result = a1;\n    *(_BYTE *)(a1 + 198) = 1;\n  }\n  return result;\n}\n"
        ],
        "134535666": [
            "sub_804D9F2",
            "0x804d9f2",
            "char *__cdecl sub_804D9F2(int a1, int *a2)\n{\n  unsigned int *v2; // edi\n  int v3; // eax\n  int v4; // ecx\n  int v5; // eax\n  int v6; // edx\n  int v7; // eax\n  char *v8; // eax\n  int v9; // ebx\n  int v10; // eax\n  int v11; // edx\n  int v12; // eax\n  int v14; // [esp-4h] [ebp-6Ch]\n  int v15[19]; // [esp+1Ch] [ebp-4Ch] BYREF\n\n  v2 = *(unsigned int **)(a1 + 276);\n  v3 = sub_804D680((int)(v2 + 1));\n  dword_8053274 = a2[2];\n  dword_805327C = a2[1];\n  dword_8053284 = *a2;\n  v4 = a2[4];\n  if ( !v4 )\n    v4 = 134539930;\n  dword_8053294 = v3;\n  v5 = *(_DWORD *)(a1 + 212);\n  dword_805328C = v4;\n  dword_805329C = (int)(&off_804EEF8)[v5];\n  dword_80532A4 = (int)(&s1)[*(_DWORD *)(a1 + 208)];\n  v6 = *(_DWORD *)(a1 + 232);\n  dword_80532AC = a2[3];\n  v7 = 0;\n  if ( v6 )\n    v7 = *(_DWORD *)(v6 + 12);\n  dword_80532B4 = v7;\n  v8 = \"on\";\n  if ( !*(_BYTE *)(a1 + 200) )\n    v8 = 0;\n  v14 = *(_DWORD *)(a1 + 220);\n  dword_80532BC = (int)v8;\n  snprintf(byte_8055500, 4u, \"%d\", v14);\n  inet_ntop(*(unsigned __int8 *)(a1 + 236), (const void *)(a1 + 240), buf, 0x2Eu);\n  snprintf(byte_805550C, 6u, \"%d\", *(unsigned __int16 *)(a1 + 238));\n  inet_ntop(*(unsigned __int8 *)(a1 + 256), (const void *)(a1 + 260), byte_8055520, 0x2Eu);\n  snprintf(byte_8055504, 6u, \"%d\", *(unsigned __int16 *)(a1 + 258));\n  v9 = 0;\n  blobmsg_parse(&off_804FB60, 13, v15, v2 + 1, (_byteswap_ulong(*v2) & 0xFFFFFF) - 4);\n  do\n  {\n    v10 = dword_804FAE4[v9];\n    *(_DWORD *)&dest[v9 * 4] = (&off_804FAE0)[v9];\n    v11 = 134539930;\n    v12 = v15[v10];\n    if ( v12 )\n      v11 = sub_804D680(v12);\n    dword_80556A4[v9] = v11;\n    v9 += 2;\n  }\n  while ( v9 != 26 );\n  qmemcpy(&unk_8055708, off_8053260, 0x98u);\n  dword_80557A0 = 0;\n  dword_80557A4 = 0;\n  return dest;\n}\n"
        ],
        "134536111": [
            "sub_804DBAF",
            "0x804dbaf",
            "int __cdecl sub_804DBAF(_DWORD *a1, int a2, int a3, void (__cdecl *a4)(_DWORD *, int, int))\n{\n  int v4; // edi\n  __pid_t v5; // eax\n  int v6; // edi\n  int v7; // eax\n  int v8; // eax\n  int v10; // [esp-Ch] [ebp-3Ch]\n  int pipedes[2]; // [esp+8h] [ebp-28h] BYREF\n  int v12[2]; // [esp+10h] [ebp-20h] BYREF\n\n  v4 = 0;\n  blob_buf_init(a1 + 91, 0);\n  a1[153] = 200;\n  a1[154] = \"OK\";\n  if ( pipe(pipedes) )\n    return v4;\n  if ( pipe(v12) )\n  {\nLABEL_9:\n    v4 = 0;\n    close(pipedes[0]);\n    close(pipedes[1]);\n    return v4;\n  }\n  v5 = fork();\n  v6 = v5;\n  if ( v5 < 0 )\n  {\n    close(v12[0]);\n    close(v12[1]);\n    goto LABEL_9;\n  }\n  if ( !v5 )\n  {\n    close(0);\n    close(1);\n    dup2(pipedes[1], 1);\n    dup2(v12[0], 0);\n    close(pipedes[0]);\n    close(pipedes[1]);\n    close(v12[0]);\n    v7 = close(v12[1]);\n    sub_804B5AE(v7);\n    a4(a1, a2, a3);\n    exit(0);\n  }\n  close(pipedes[1]);\n  close(v12[0]);\n  a1[96] = v12[1];\n  v10 = v6;\n  v4 = 1;\n  sub_804D61C((int)a1, (int)(a1 + 98), pipedes[0], v10);\n  v8 = dword_80533D0;\n  a1[81] = sub_804D8DE;\n  a1[80] = sub_804D6A0;\n  a1[77] = sub_804D7B1;\n  a1[78] = sub_804D8A0;\n  a1[79] = sub_804D86A;\n  a1[150] = sub_804D700;\n  a1[151] = sub_804D91F;\n  a1[152] = sub_804D82F;\n  a1[95] = sub_804D6F0;\n  a1[88] = sub_804D6D3;\n  if ( v8 > 0 )\n    uloop_timeout_set(a1 + 85, 1000 * v8);\n  return v4;\n}\n"
        ],
        "134536580": [
            "sub_804DD84",
            "0x804dd84",
            "int __cdecl sub_804DD84(char *file)\n{\n  void *v1; // eax\n  _DWORD *v2; // eax\n  void *v4; // edx\n  char *v5; // [esp+4h] [ebp-Ch]\n\n  v1 = dlopen(file, 257);\n  if ( !v1 )\n  {\n    v5 = dlerror();\n    fprintf(stderr, \"Could not open plugin %s: %s\\n\", file, v5);\n    return -2;\n  }\n  v2 = dlsym(v1, \"uhttpd_plugin\");\n  if ( !v2 )\n  {\n    fprintf(stderr, \"Could not find symbol '%s' in plugin '%s'\\n\", \"uhttpd_plugin\", file);\n    return -2;\n  }\n  v4 = off_80532F8;\n  *((_DWORD *)off_80532F8 + 1) = v2;\n  *v2 = v4;\n  v2[1] = &off_80532F8;\n  off_80532F8 = v2;\n  return ((int (__cdecl *)(int (__cdecl **)(int), char **, void *, void *))v2[2])(&off_804FC20, &src, v4, v4);\n}\n"
        ],
        "134536720": [
            "sub_804DE10",
            "0x804de10",
            "int __fastcall sub_804DE10(int a1, int a2)\n{\n  void **i; // ebx\n  void (*v3)(void); // eax\n\n  for ( i = (void **)off_80532F8; i != &off_80532F8; i = (void **)*i )\n  {\n    v3 = (void (*)(void))i[3];\n    if ( v3 )\n      v3();\n  }\n  return a2;\n}\n"
        ],
        "134536756": [
            "sub_804DE34",
            "0x804de34",
            "int __usercall sub_804DE34@<eax>(int a1@<eax>)\n{\n  int v1; // ecx\n  unsigned __int16 v2; // dx\n\n  v1 = a1 + 4;\n  if ( *(char *)a1 < 0 )\n  {\n    HIBYTE(v2) = *(_WORD *)(a1 + 4);\n    LOBYTE(v2) = HIBYTE(*(_WORD *)(a1 + 4));\n    v1 += (v2 + 6) & 0xFFFFFFFC;\n  }\n  return v1;\n}\n"
        ],
        "134536788": [
            "sub_804DE54",
            "0x804de54",
            "int __usercall sub_804DE54@<eax>(int a1@<eax>)\n{\n  if ( a1 )\n    return sub_804DE34(a1);\n  else\n    return 0;\n}\n"
        ],
        "134536802": [
            "sub_804DE62",
            "0x804de62",
            "int sub_804DE62()\n{\n  int result; // eax\n\n  result = dword_8055624;\n  *(_BYTE *)(dword_8055624 + 337) = 1;\n  return result;\n}\n"
        ],
        "134536819": [
            "sub_804DE73",
            "0x804de73",
            "const char *__cdecl sub_804DE73(int a1, char *s2)\n{\n  int v2; // ebx\n  int *v3; // eax\n  int i; // ebx\n  const char *result; // eax\n\n  if ( !dword_805563C )\n  {\n    v2 = dword_8055624;\n    v3 = sub_804C0E3(dword_8055624, *(char **)dword_8055620);\n    if ( !v3 )\n      v3 = (int *)&unk_80555A0;\n    dword_805563C = (int)sub_804D9F2(v2, v3);\n  }\n  for ( i = dword_805563C; ; i += 8 )\n  {\n    result = *(const char **)i;\n    if ( !*(_DWORD *)i )\n      break;\n    if ( !strcmp(result, s2) )\n      return *(const char **)(i + 4);\n  }\n  return result;\n}\n"
        ],
        "134536928": [
            "sub_804DEE0",
            "0x804dee0",
            "int __cdecl sub_804DEE0(int a1, char *s2, int a3)\n{\n  int v3; // ebx\n  int result; // eax\n  int v6; // [esp+Ch] [ebp-1Ch]\n\n  v3 = 0;\n  while ( 1 )\n  {\n    v6 = a3;\n    result = strcmp((&off_804FCC0)[2 * v3], s2);\n    a3 = v6;\n    if ( !result )\n      break;\n    if ( ++v3 == 4 )\n      return result;\n  }\n  return (*(&off_804FCC4 + 2 * v3))(a1, v6);\n}\n"
        ],
        "134537012": [
            "sub_804DF34",
            "0x804df34",
            "unsigned __int32 __usercall sub_804DF34@<eax>(unsigned int *a1@<eax>)\n{\n  return (unsigned __int32)a1 + (_byteswap_ulong(*a1) & 0xFFFFFF) - sub_804DE34((int)a1);\n}\n"
        ],
        "134537041": [
            "sub_804DF51",
            "0x804df51",
            "int __cdecl sub_804DF51(int a1, unsigned int *a2)\n{\n  int v2; // ebx\n  unsigned __int32 v3; // edi\n  int v4; // eax\n  int result; // eax\n  unsigned int *v6; // eax\n  const char *v7; // edx\n  int v8; // esi\n  int v9; // ecx\n  const char *v10; // eax\n  int v11; // [esp+4h] [ebp-24h] BYREF\n  int v12; // [esp+8h] [ebp-20h]\n  int v13; // [esp+Ch] [ebp-1Ch]\n\n  v2 = dword_8055624;\n  v3 = sub_804DF34(a2);\n  v4 = sub_804DE34((int)a2);\n  result = blobmsg_parse_array(&unk_8053300, 3, &v11, v4, v3);\n  if ( v11 )\n  {\n    if ( v12 )\n    {\n      v6 = (unsigned int *)sub_804DE34(v12);\n      v7 = \"Found\";\n      v8 = _byteswap_ulong(*v6);\n      if ( v13 )\n        v7 = (const char *)sub_804DE54(v13);\n    }\n    else\n    {\n      v8 = 302;\n      v7 = \"Found\";\n    }\n    sub_804A82E(v2, v8, v7);\n    if ( !(unsigned __int8)sub_804B5F8(v2) )\n      ustream_printf(*(_DWORD *)(v2 + 16), \"Content-Length: 0\\r\\n\", v9, v9);\n    v10 = (const char *)sub_804DE54(v11);\n    ustream_printf(*(_DWORD *)(v2 + 16), \"Location: %s\\r\\n\\r\\n\", v10);\n    sub_804A91C(v2);\n    *(_DWORD *)dword_8055620 = 0;\n    result = a1;\n    dword_8055628 = 1;\n    *(_BYTE *)(a1 + 48) = 1;\n  }\n  return result;\n}\n"
        ],
        "134537268": [
            "sub_804E034",
            "0x804e034",
            "bool __usercall sub_804E034@<al>(int *a1@<eax>, unsigned int *a2@<edx>)\n{\n  unsigned __int32 v4; // edi\n  int v5; // eax\n  int v6; // edx\n  int v7; // eax\n\n  v4 = sub_804DF34(a2);\n  v5 = sub_804DE34((int)a2);\n  v7 = json_script_file_from_blobmsg(0, v5, v4, v6);\n  *a1 = v7;\n  return v7 != 0;\n}\n"
        ],
        "134537325": [
            "sub_804E06D",
            "0x804e06d",
            "int __cdecl sub_804E06D(int a1, unsigned int *a2)\n{\n  int v2; // ebx\n  unsigned __int32 v3; // edi\n  int v4; // eax\n  int v5; // esi\n  int result; // eax\n  unsigned __int32 v7; // eax\n  const char *v8; // edx\n  int v9; // eax\n  int v10; // [esp-4h] [ebp-2Ch]\n  int v11; // [esp-4h] [ebp-2Ch]\n  int v12[7]; // [esp+Ch] [ebp-1Ch] BYREF\n\n  v2 = dword_8055624;\n  v3 = sub_804DF34(a2);\n  v4 = sub_804DE34((int)a2);\n  v5 = *(_DWORD *)(v2 + 276);\n  result = blobmsg_parse_array(&unk_8053318, 1, v12, v4, v3);\n  if ( v12[0] )\n  {\n    v10 = result;\n    blob_buf_init(&dword_805562C, 0);\n    v7 = ((_byteswap_ulong(*(_DWORD *)(v5 + 4)) & 0xFFFFFF) + 3) & 0xFFFFFFFC;\n    blob_put_raw(&dword_805562C, v5 + v7 + 4, (_byteswap_ulong(**(_DWORD **)(v2 + 276)) & 0xFFFFFF) - 4 - v7, v10);\n    blob_buf_init(v2 + 276, 0);\n    v8 = (const char *)sub_804DE54(v12[0]);\n    blobmsg_add_field(v2 + 276, 3, \"URL\", v8, strlen(v8) + 1);\n    blob_put_raw(v2 + 276, dword_805562C + 4, (_byteswap_ulong(*(_DWORD *)dword_805562C) & 0xFFFFFF) - 4, v11);\n    v9 = sub_804DE34(*(_DWORD *)(v2 + 276) + 4);\n    dword_805563C = 0;\n    *(_DWORD *)dword_8055620 = v9;\n    blob_buf_init(&dword_805562C, 0);\n    result = a1;\n    dword_8055628 = 1;\n    *(_BYTE *)(a1 + 48) = 1;\n  }\n  return result;\n}\n"
        ],
        "134537629": [
            "sub_804E19D",
            "0x804e19d",
            "int __cdecl sub_804E19D(int a1, unsigned int *a2)\n{\n  int v2; // ebx\n  unsigned __int32 v3; // edi\n  int v4; // eax\n  int result; // eax\n  int v6; // edi\n  const char *v7; // esi\n  int v8; // edx\n  int v9; // [esp+8h] [ebp-20h] BYREF\n  int v10; // [esp+Ch] [ebp-1Ch]\n\n  v2 = dword_8055624;\n  v3 = sub_804DF34(a2);\n  v4 = sub_804DE34((int)a2);\n  result = blobmsg_parse_array(&unk_8053320, 2, &v9, v4, v3);\n  v6 = v9;\n  if ( v9 )\n  {\n    result = v10;\n    if ( v10 )\n    {\n      v7 = (const char *)sub_804DE54(v10);\n      v8 = sub_804DE54(v6);\n      return blobmsg_add_field(v2 + 292, 3, v8, v7, strlen(v7) + 1);\n    }\n  }\n  return result;\n}\n"
        ],
        "134537759": [
            "sub_804E21F",
            "0x804e21f",
            "int __cdecl sub_804E21F(int a1)\n{\n  int v1; // ecx\n  unsigned int *v2; // esi\n  int *v3; // eax\n  int *v4; // ebx\n  void **v6; // eax\n  int v7; // [esp-8h] [ebp-40h]\n  int v8; // [esp-4h] [ebp-3Ch]\n  unsigned int *v9; // [esp+8h] [ebp-30h] BYREF\n  unsigned int *v10; // [esp+Ch] [ebp-2Ch]\n  char v11[40]; // [esp+10h] [ebp-28h] BYREF\n\n  qmemcpy(v11, &off_804FCA0, 0x10u);\n  v1 = 0;\n  if ( !dword_8055674 )\n  {\n    json_script_init(&unk_8055640);\n    dword_8055674 = (int)sub_804DEE0;\n    dword_805567C = (int)sub_804DE73;\n  }\n  v8 = v1;\n  v7 = v1;\n  blob_buf_init(&dword_805562C, 0);\n  if ( !(unsigned __int8)blobmsg_add_json_from_file(&dword_805562C, a1, v7, v8) )\n    return -1;\n  blobmsg_parse(v11, 2, &v9, dword_805562C + 4, (_byteswap_ulong(*(_DWORD *)dword_805562C) & 0xFFFFFF) - 4);\n  v2 = v9;\n  if ( !v9 && !v10 )\n    return -1;\n  v3 = (int *)calloc(1u, 0x10u);\n  v4 = v3;\n  if ( v2 && !sub_804E034(v3 + 2, v2) || v10 && !sub_804E034(v4 + 3, v10) )\n  {\n    free((void *)v4[2]);\n    free((void *)v4[3]);\n    free(v4);\n    return -1;\n  }\n  v6 = off_8053334;\n  *v4 = (int)&off_8053330;\n  v4[1] = (int)v6;\n  off_8053334 = (void **)v4;\n  *v6 = v4;\n  return 0;\n}\n"
        ],
        "134538049": [
            "sub_804E341",
            "0x804e341",
            "int sub_804E341(int a1, int a2, char a3, ...)\n{\n  int v4; // eax\n  void **i; // ebx\n  void *v6; // esi\n  int v8; // [esp-4h] [ebp-1Ch]\n  char v9; // [esp+Fh] [ebp-9h]\n\n  dword_805563C = 0;\n  dword_8055624 = a1;\n  v4 = a2;\n  dword_8055620 = a2;\n  dword_8055628 = 0;\n  for ( i = (void **)off_8053330; i != &off_8053330; i = (void **)*i )\n  {\n    v6 = a3 ? i[3] : i[2];\n    if ( v6 )\n    {\n      v8 = v4;\n      v9 = a3;\n      blob_buf_init(&dword_805562C, 0);\n      v4 = json_script_run_file(&unk_8055640, v6, dword_805562C, v8);\n      a3 = v9;\n      if ( byte_8055670 )\n        break;\n    }\n  }\n  return dword_8055628;\n}\n"
        ],
        "134538194": [
            "sub_804E3D2",
            "0x804e3d2",
            "int __fastcall sub_804E3D2(int a1, int a2)\n{\n  void (**i)(void); // ebx\n\n  for ( i = (void (**)(void))&dword_8052F20; *i != (void (*)(void))-1; --i )\n    (*i)();\n  return a2;\n}\n"
        ]
    },
    "strings": {
        "134512948": [
            "/lib/ld-uClibc.so.0",
            [
                4294967295
            ]
        ],
        "134515545": [
            "libubox.so",
            []
        ],
        "134515556": [
            "strcpy",
            [
                4294967295
            ]
        ],
        "134515563": [
            "uloop_run",
            [
                4294967295
            ]
        ],
        "134515573": [
            "__ctype_b",
            [
                4294967295
            ]
        ],
        "134515583": [
            "fgets",
            [
                4294967295
            ]
        ],
        "134515589": [
            "fcntl64",
            [
                4294967295
            ]
        ],
        "134515597": [
            "uloop_done",
            [
                4294967295
            ]
        ],
        "134515608": [
            "uloop_fd_add",
            [
                4294967295
            ]
        ],
        "134515621": [
            "blob_buf_free",
            [
                4294967295
            ]
        ],
        "134515635": [
            "blob_put_raw",
            [
                4294967295
            ]
        ],
        "134515648": [
            "ustream_free",
            [
                4294967295
            ]
        ],
        "134515661": [
            "malloc",
            [
                4294967295
            ]
        ],
        "134515668": [
            "blob_buf_init",
            [
                4294967295
            ]
        ],
        "134515682": [
            "vsnprintf",
            [
                4294967295
            ]
        ],
        "134515692": [
            "socket",
            [
                4294967295
            ]
        ],
        "134515699": [
            "freeaddrinfo",
            [
                4294967295
            ]
        ],
        "134515712": [
            "blobmsg_parse",
            [
                4294967295
            ]
        ],
        "134515731": [
            "blobmsg_add_field",
            [
                4294967295
            ]
        ],
        "134515749": [
            "calloc",
            [
                4294967295
            ]
        ],
        "134515756": [
            "fprintf",
            [
                4294967295
            ]
        ],
        "134515764": [
            "uloop_timeout_cancel",
            [
                4294967295
            ]
        ],
        "134515795": [
            "setsockopt",
            [
                4294967295
            ]
        ],
        "134515806": [
            "__calloc_a",
            [
                4294967295
            ]
        ],
        "134515822": [
            "strncmp",
            [
                4294967295
            ]
        ],
        "134515830": [
            "uloop_process_add",
            [
                4294967295
            ]
        ],
        "134515848": [
            "realloc",
            [
                4294967295
            ]
        ],
        "134515856": [
            "listen",
            [
                4294967295
            ]
        ],
        "134515863": [
            "ustream_write",
            [
                4294967295
            ]
        ],
        "134515877": [
            "ustream_get_read_buf",
            [
                4294967295
            ]
        ],
        "134515898": [
            "ustream_consume",
            [
                4294967295
            ]
        ],
        "134515914": [
            "fclose",
            [
                4294967295
            ]
        ],
        "134515921": [
            "strcmp",
            [
                4294967295
            ]
        ],
        "134515928": [
            "uloop_fd_delete",
            [
                4294967295
            ]
        ],
        "134515944": [
            "_fini",
            [
                4294967295
            ]
        ],
        "134515950": [
            "ustream_set_read_blocked",
            [
                4294967295
            ]
        ],
        "134515975": [
            "blobmsg_parse_array",
            [
                4294967295
            ]
        ],
        "134515995": [
            "stderr",
            [
                4294967295
            ]
        ],
        "134516002": [
            "getaddrinfo",
            [
                4294967295
            ]
        ],
        "134516014": [
            "ustream_printf",
            [
                4294967295
            ]
        ],
        "134516029": [
            "uloop_timeout_set",
            [
                4294967295
            ]
        ],
        "134516047": [
            "ustream_vprintf",
            [
                4294967295
            ]
        ],
        "134516063": [
            "uloop_init",
            [
                4294967295
            ]
        ],
        "134516074": [
            "__errno_location",
            [
                4294967295
            ]
        ],
        "134516091": [
            "ustream_fd_init",
            [
                4294967295
            ]
        ],
        "134516107": [
            "uloop_process_delete",
            [
                4294967295
            ]
        ],
        "134516128": [
            "strchr",
            [
                4294967295
            ]
        ],
        "134516135": [
            "fputs",
            [
                4294967295
            ]
        ],
        "134516141": [
            "fopen64",
            [
                4294967295
            ]
        ],
        "134516149": [
            "libjson_script.so",
            []
        ],
        "134516167": [
            "json_script_init",
            [
                4294967295
            ]
        ],
        "134516184": [
            "stat64",
            [
                4294967295
            ]
        ],
        "134516191": [
            "json_script_file_from_blobmsg",
            [
                4294967295
            ]
        ],
        "134516221": [
            "json_script_run_file",
            [
                4294967295
            ]
        ],
        "134516242": [
            "libblobmsg_json.so",
            []
        ],
        "134516261": [
            "blobmsg_add_json_from_file",
            [
                4294967295
            ]
        ],
        "134516288": [
            "libjson-c.so.4",
            []
        ],
        "134516303": [
            "strncasecmp",
            [
                4294967295
            ]
        ],
        "134516315": [
            "strrchr",
            [
                4294967295
            ]
        ],
        "134516323": [
            "strcat",
            [
                4294967295
            ]
        ],
        "134516330": [
            "strstr",
            [
                4294967295
            ]
        ],
        "134516337": [
            "strdup",
            [
                4294967295
            ]
        ],
        "134516349": [
            "libc.so.0",
            []
        ],
        "134516359": [
            "scandir64",
            [
                4294967295
            ]
        ],
        "134516369": [
            "dlerror",
            [
                4294967295
            ]
        ],
        "134516377": [
            "alphasort64",
            [
                4294967295
            ]
        ],
        "134516389": [
            "execl",
            [
                4294967295
            ]
        ],
        "134516395": [
            "perror",
            [
                4294967295
            ]
        ],
        "134516407": [
            "optarg",
            [
                4294967295
            ]
        ],
        "134516414": [
            "strtoul",
            [
                4294967295
            ]
        ],
        "134516422": [
            "realpath",
            [
                4294967295
            ]
        ],
        "134516431": [
            "clearenv",
            [
                4294967295
            ]
        ],
        "134516440": [
            "accept",
            [
                4294967295
            ]
        ],
        "134516447": [
            "gai_strerror",
            [
                4294967295
            ]
        ],
        "134516460": [
            "chdir",
            [
                4294967295
            ]
        ],
        "134516466": [
            "signal",
            [
                4294967295
            ]
        ],
        "134516473": [
            "getspnam",
            [
                4294967295
            ]
        ],
        "134516482": [
            "dlopen",
            [
                4294967295
            ]
        ],
        "134516489": [
            "setenv",
            [
                4294967295
            ]
        ],
        "134516496": [
            "strcasecmp",
            [
                4294967295
            ]
        ],
        "134516507": [
            "strtok",
            [
                4294967295
            ]
        ],
        "134516514": [
            "crypt",
            [
                4294967295
            ]
        ],
        "134516525": [
            "__uClibc_main",
            [
                4294967295
            ]
        ],
        "134516539": [
            "dlsym",
            [
                4294967295
            ]
        ],
        "134516545": [
            "getopt",
            [
                4294967295
            ]
        ],
        "134516552": [
            "getpwnam",
            [
                4294967295
            ]
        ],
        "134516561": [
            "timegm",
            [
                4294967295
            ]
        ],
        "134516568": [
            "strftime",
            [
                4294967295
            ]
        ],
        "134516577": [
            "strptime",
            [
                4294967295
            ]
        ],
        "134516586": [
            "inet_ntop",
            [
                4294967295
            ]
        ],
        "134516601": [
            "gmtime",
            [
                4294967295
            ]
        ],
        "134516608": [
            "__ctype_tolower",
            [
                4294967295
            ]
        ],
        "134516624": [
            "getsockname",
            [
                4294967295
            ]
        ],
        "134516636": [
            "_edata",
            [
                4294967295
            ]
        ],
        "134516643": [
            "__bss_start",
            [
                4294967295
            ]
        ],
        "134538272": [
            "/etc/httpd.conf",
            [
                134521125
            ]
        ],
        "134538291": [
            "E404:",
            [
                134521125
            ]
        ],
        "134538297": [
            "Protected Area",
            [
                134519120
            ]
        ],
        "134538312": [
            "/cgi-bin",
            [
                134519120
            ]
        ],
        "134538321": [
            "/sbin:/usr/sbin:/bin:/usr/bin",
            [
                134519120
            ]
        ],
        "134538351": [
            "uhttpd: TLS support not compiled, ignoring -%c\n",
            [
                134519120
            ]
        ],
        "134538399": [
            "Error: Invalid directory %s: %s\n",
            [
                134519120
            ]
        ],
        "134538432": [
            "Error: Failed to load handler script %s\n",
            [
                134519120
            ]
        ],
        "134538473": [
            "Error: Invalid error handler: %s\n",
            [
                134519120
            ]
        ],
        "134538507": [
            "Error: Invalid index page: %s\n",
            [
                134519120
            ]
        ],
        "134538538": [
            "Error: failed to allocate alias\n",
            [
                134519120
            ]
        ],
        "134538571": [
            "Error: Invalid interpreter: %s\n",
            [
                134519120
            ]
        ],
        "134538603": [
            "uhttpd: invalid encoding\n",
            [
                134519120
            ]
        ],
        "134538633": [
            "uhttpd: Lua support not compiled, ignoring -%c\n",
            [
                134519120
            ]
        ],
        "134538681": [
            "uhttpd: UBUS support not compiled, ignoring -%c\n",
            [
                134519120
            ]
        ],
        "134538730": [
            "Usage: %s -p [addr:]port -h docroot\n\t-f              Do not fork to background\n\t-c file         Configuration file, default is '/etc/httpd.conf'\n\t-p [addr:]port  Bind to specified address and port, multiple allowed\n\t-h directory    Specify the document root, default is '.'\n\t-E string       Use given virtual URL as 404 error handler\n\t-I string       Use given filename as index for directories, multiple allowed\n\t-S              Do not follow symbolic links outside of the docroot\n\t-D              Do not allow directory listings, send 403 instead\n\t-R              Enable RFC1918 filter\n\t-n count        Maximum allowed number of concurrent script requests\n\t-N count        Maximum allowed number of concurrent connections\n\t-x string       URL prefix for CGI handler, default is '/cgi-bin'\n\t-y alias[=path]\tURL alias handle\n\t-i .ext=path    Use interpreter at path for files with the given extension\n\t-t seconds      CGI, Lua and UBUS script timeout in seconds, default is 60\n\t-T seconds      Network timeout in seconds, default is 30\n\t-k seconds      HTTP keepalive timeout\n\t-d string       URL decode given string\n\t-r string       Specify basic auth realm\n\t-m string       MD5 crypt given string\n\n",
            [
                134519120
            ]
        ],
        "134539931": [
            "A:aC:c:Dd:E:fh:H:I:i:K:k:L:l:m:N:n:p:qRr:Ss:T:t:U:u:Xx:y:",
            [
                134519120
            ]
        ],
        "134539989": [
            "Error: Unable to determine work dir\n",
            [
                134519120
            ]
        ],
        "134540026": [
            "index.html",
            [
                134519120
            ]
        ],
        "134540037": [
            "index.htm",
            [
                134519120
            ]
        ],
        "134540047": [
            "default.html",
            [
                134519120
            ]
        ],
        "134540060": [
            "default.htm",
            [
                134519120
            ]
        ],
        "134540072": [
            "Error: No sockets bound, unable to continue\n",
            [
                134519120
            ]
        ],
        "134540117": [
            "fork()",
            [
                134519120
            ]
        ],
        "134540124": [
            "chdir()",
            [
                134519120
            ]
        ],
        "134540132": [
            "/dev/null",
            [
                134519120
            ]
        ],
        "134540372": [
            "getaddrinfo(): %s\n",
            [
                134522128
            ]
        ],
        "134540391": [
            "socket()",
            [
                134522128
            ]
        ],
        "134540400": [
            "setsockopt()",
            [
                134522128
            ]
        ],
        "134540413": [
            "bind()",
            [
                134522128
            ]
        ],
        "134540420": [
            "listen()",
            [
                134522128
            ]
        ],
        "134540429": [
            "Transfer-Encoding: chunked\r\n",
            [
                134522926
            ]
        ],
        "134540458": [
            "Connection: close",
            [
                134522926
            ]
        ],
        "134540476": [
            "Connection: Keep-Alive",
            [
                134522926
            ]
        ],
        "134540499": [
            "%s %03i %s\r\n%s\r\n%s",
            [
                134522926
            ]
        ],
        "134540518": [
            "Keep-Alive: timeout=%d\r\n",
            [
                134522926
            ]
        ],
        "134540543": [
            "%s: %s\r\n",
            [
                134522926,
                134535455
            ]
        ],
        "134540552": [
            "Content-Type: text/html\r\n\r\n",
            [
                134523321,
                134530487
            ]
        ],
        "134540580": [
            "<h1>%s</h1>",
            [
                134523321
            ]
        ],
        "134540596": [
            "Bad Request",
            [
                134524304,
                134523476
            ]
        ],
        "134540608": [
            "Rejected request from RFC1918 IP to public server address",
            [
                134524304
            ]
        ],
        "134540666": [
            "Forbidden",
            [
                134524304,
                134533617,
                134530487
            ]
        ],
        "134540681": [
            "Temporary Redirect",
            [
                134524304
            ]
        ],
        "134540700": [
            "Location: https://%s:%d%s\r\n\r\n",
            [
                134524304
            ]
        ],
        "134540730": [
            "Location: https://%s%s\r\n\r\n",
            [
                134524304
            ]
        ],
        "134540757": [
            "HTTP/1.1 100 Continue\r\n\r\n",
            [
                134524304
            ]
        ],
        "134540783": [
            "expect",
            [
                134524304
            ]
        ],
        "134540790": [
            "100-continue",
            [
                134524304
            ]
        ],
        "134540803": [
            "Precondition Failed",
            [
                134524304,
                134527822
            ]
        ],
        "134540823": [
            "content-length",
            [
                134524304
            ]
        ],
        "134540838": [
            "transfer-encoding",
            [
                134524304
            ]
        ],
        "134540856": [
            "chunked",
            [
                134524304
            ]
        ],
        "134540864": [
            "connection",
            [
                134524304
            ]
        ],
        "134540875": [
            "user-agent",
            [
                134524304
            ]
        ],
        "134540886": [
            "Opera",
            [
                134524304
            ]
        ],
        "134540892": [
            "MSIE ",
            [
                134524304
            ]
        ],
        "134540902": [
            "Chrome/",
            [
                134524304
            ]
        ],
        "134540910": [
            "Safari/",
            [
                134524304
            ]
        ],
        "134540918": [
            "Mac OS X",
            [
                134524304
            ]
        ],
        "134540927": [
            "Gecko/",
            [
                134524304
            ]
        ],
        "134540934": [
            "Konqueror",
            [
                134524304
            ]
        ],
        "134540944": [
            "Request Entity Too Large",
            [
                134525705
            ]
        ],
        "134540983": [
            "OPTIONS",
            [
                4294967295
            ]
        ],
        "134540991": [
            "HTTP/0.9",
            [
                4294967295
            ]
        ],
        "134541000": [
            "HTTP/1.0",
            [
                4294967295
            ]
        ],
        "134541009": [
            "HTTP/1.1",
            [
                4294967295
            ]
        ],
        "134541065": [
            "0\r\n\r\n",
            [
                134526899
            ]
        ],
        "134541073": [
            "123456789abcdef",
            []
        ],
        "134541089": [
            "%a, %d %b %Y %H:%M:%S %Z",
            [
                134527870
            ]
        ],
        "134541114": [
            "application/octet-stream",
            [
                134527936
            ]
        ],
        "134541139": [
            "\"%llx-%llx-%llx\"",
            [
                134528765
            ]
        ],
        "134541156": [
            "ETag: %s\r\n",
            [
                134529021
            ]
        ],
        "134541167": [
            "%a, %d %b %Y %H:%M:%S GMT",
            [
                134529021,
                134530487
            ]
        ],
        "134541193": [
            "Last-Modified: %s\r\n",
            [
                134529021
            ]
        ],
        "134541213": [
            "Date: %s\r\n",
            [
                134529021
            ]
        ],
        "134541226": [
            "Content-Length: 0\r\n",
            [
                134537041,
                134529251
            ]
        ],
        "134541246": [
            "Location: %s%s%s\r\n\r\n",
            [
                134529251
            ]
        ],
        "134541267": [
            "directory",
            [
                134530487
            ]
        ],
        "134541277": [
            "Not Modified",
            [
                134530487
            ]
        ],
        "134541295": [
            "Content-Type: %s\r\n",
            [
                134530487
            ]
        ],
        "134541314": [
            "Content-Length: %llu\r\n\r\n",
            [
                134530487
            ]
        ],
        "134541339": [
            "<html><head><title>Index of %s</title></head><body><h1>Index of %s</h1><hr /><ol>",
            [
                134530487
            ]
        ],
        "134541421": [
            "<li><strong><a href='%s%s%s'>%s</a>%s</strong><br /><small>modified: %s<br />%s - %.02f kbyte<br /><br /></small></li>",
            [
                134530487
            ]
        ],
        "134541540": [
            "</ol><hr /></body></html>",
            [
                134530487
            ]
        ],
        "134541566": [
            "You don't have permission to access %s on this server.",
            [
                134533617,
                134530487
            ]
        ],
        "134541621": [
            "The requested URL %s was not found on this server.",
            [
                134532079
            ]
        ],
        "134541676": [
            "Found",
            [
                134537041,
                134529251
            ]
        ],
        "134541682": [
            "authorization",
            [
                4294967295
            ]
        ],
        "134541696": [
            "if-modified-since",
            []
        ],
        "134541714": [
            "if-unmodified-since",
            []
        ],
        "134541734": [
            "if-match",
            []
        ],
        "134541743": [
            "if-none-match",
            []
        ],
        "134541757": [
            "if-range",
            []
        ],
        "134541770": [
            "text/plain",
            [
                4294967295
            ]
        ],
        "134541788": [
            "text/javascript",
            [
                4294967295
            ]
        ],
        "134541804": [
            "text/css",
            [
                4294967295
            ]
        ],
        "134541813": [
            "text/html",
            [
                4294967295
            ]
        ],
        "134541828": [
            "text/x-patch",
            [
                4294967295
            ]
        ],
        "134541841": [
            "text/x-csrc",
            [
                4294967295
            ]
        ],
        "134541853": [
            "text/x-chdr",
            [
                4294967295
            ]
        ],
        "134541865": [
            "text/x-object",
            [
                4294967295
            ]
        ],
        "134541882": [
            "image/bmp",
            [
                4294967295
            ]
        ],
        "134541892": [
            "image/gif",
            [
                4294967295
            ]
        ],
        "134541902": [
            "image/png",
            [
                4294967295
            ]
        ],
        "134541916": [
            "image/jpeg",
            [
                4294967295
            ]
        ],
        "134541931": [
            "image/svg+xml",
            [
                4294967295
            ]
        ],
        "134541945": [
            "application/json",
            [
                4294967295
            ]
        ],
        "134541962": [
            "jsonp",
            [
                4294967295
            ]
        ],
        "134541968": [
            "application/javascript",
            [
                4294967295
            ]
        ],
        "134541991": [
            "application/zip",
            [
                4294967295
            ]
        ],
        "134542007": [
            "application/pdf",
            [
                4294967295
            ]
        ],
        "134542023": [
            "application/xml",
            [
                4294967295
            ]
        ],
        "134542047": [
            "application/msword",
            [
                4294967295
            ]
        ],
        "134542070": [
            "application/vnd.ms-powerpoint",
            [
                4294967295
            ]
        ],
        "134542104": [
            "application/vnd.ms-excel",
            [
                4294967295
            ]
        ],
        "134542133": [
            "application/vnd.oasis.opendocument.text",
            [
                4294967295
            ]
        ],
        "134542177": [
            "application/vnd.oasis.opendocument.presentation",
            [
                4294967295
            ]
        ],
        "134542228": [
            "application/x-perl",
            [
                4294967295
            ]
        ],
        "134542250": [
            "application/x-shellscript",
            [
                4294967295
            ]
        ],
        "134542276": [
            "application/x-php",
            [
                4294967295
            ]
        ],
        "134542294": [
            "application/x-deb",
            [
                4294967295
            ]
        ],
        "134542316": [
            "application/x-cd-image",
            [
                4294967295
            ]
        ],
        "134542339": [
            "tar.gz",
            [
                4294967295
            ]
        ],
        "134542346": [
            "application/x-compressed-tar",
            [
                4294967295
            ]
        ],
        "134542379": [
            "application/x-gzip",
            [
                4294967295
            ]
        ],
        "134542398": [
            "tar.bz2",
            [
                4294967295
            ]
        ],
        "134542406": [
            "application/x-bzip-compressed-tar",
            [
                4294967295
            ]
        ],
        "134542444": [
            "application/x-bzip",
            [
                4294967295
            ]
        ],
        "134542463": [
            "application/x-tar",
            [
                4294967295
            ]
        ],
        "134542485": [
            "application/x-rar-compressed",
            [
                4294967295
            ]
        ],
        "134542518": [
            "audio/mpeg",
            [
                4294967295
            ]
        ],
        "134542529": [
            "audio/x-vorbis+ogg",
            [
                4294967295
            ]
        ],
        "134542548": [
            "audio/x-wav",
            [
                4294967295
            ]
        ],
        "134542564": [
            "video/mpeg",
            [
                4294967295
            ]
        ],
        "134542579": [
            "video/x-msvideo",
            [
                4294967295
            ]
        ],
        "134542595": [
            "README",
            [
                4294967295
            ]
        ],
        "134542610": [
            "application/x-ns-proxy-autoconfig",
            [
                4294967295
            ]
        ],
        "134542644": [
            "wpad.dat",
            [
                4294967295
            ]
        ],
        "134543168": [
            "Basic ",
            [
                134532876
            ]
        ],
        "134543175": [
            "Authorization Required",
            [
                134532876
            ]
        ],
        "134543198": [
            "WWW-Authenticate: Basic realm=\"%s\"\r\nContent-Type: text/plain\r\n\r\n",
            [
                134532876
            ]
        ],
        "134543263": [
            "Authorization Required\n",
            [
                134532876
            ]
        ],
        "134543292": [
            "Status: 500 Internal Server Error\r\n\r\nUnable to launch the requested CGI program:\n  %s: %s\n",
            [
                134533274
            ]
        ],
        "134543383": [
            "Failed to create CGI process: %s",
            [
                134533617
            ]
        ],
        "134543416": [
            "Internal Server Error",
            [
                134533617
            ]
        ],
        "134543438": [
            "Status",
            [
                134534912
            ]
        ],
        "134543445": [
            "The process did not produce any response",
            [
                134535215
            ]
        ],
        "134543486": [
            "Bad Gateway",
            [
                134535215
            ]
        ],
        "134543501": [
            "GATEWAY_INTERFACE",
            [
                4294967295
            ]
        ],
        "134543519": [
            "CGI/1.1",
            [
                4294967295
            ]
        ],
        "134543527": [
            "SERVER_SOFTWARE",
            [
                4294967295
            ]
        ],
        "134543543": [
            "uhttpd",
            [
                4294967295
            ]
        ],
        "134543550": [
            "SCRIPT_NAME",
            [
                4294967295
            ]
        ],
        "134543562": [
            "SCRIPT_FILENAME",
            [
                4294967295
            ]
        ],
        "134543578": [
            "DOCUMENT_ROOT",
            [
                4294967295
            ]
        ],
        "134543592": [
            "QUERY_STRING",
            [
                4294967295
            ]
        ],
        "134543605": [
            "REQUEST_URI",
            [
                4294967295
            ]
        ],
        "134543617": [
            "SERVER_PROTOCOL",
            [
                4294967295
            ]
        ],
        "134543633": [
            "REQUEST_METHOD",
            [
                4294967295
            ]
        ],
        "134543648": [
            "PATH_INFO",
            [
                4294967295
            ]
        ],
        "134543658": [
            "REMOTE_USER",
            [
                4294967295
            ]
        ],
        "134543670": [
            "HTTPS",
            [
                4294967295
            ]
        ],
        "134543676": [
            "REDIRECT_STATUS",
            [
                4294967295
            ]
        ],
        "134543692": [
            "SERVER_NAME",
            [
                4294967295
            ]
        ],
        "134543704": [
            "SERVER_ADDR",
            [
                4294967295
            ]
        ],
        "134543716": [
            "SERVER_PORT",
            [
                4294967295
            ]
        ],
        "134543728": [
            "REMOTE_HOST",
            [
                4294967295
            ]
        ],
        "134543740": [
            "REMOTE_ADDR",
            [
                4294967295
            ]
        ],
        "134543752": [
            "REMOTE_PORT",
            [
                4294967295
            ]
        ],
        "134543764": [
            "HTTP_ACCEPT",
            [
                4294967295
            ]
        ],
        "134543776": [
            "HTTP_ACCEPT_CHARSET",
            [
                4294967295
            ]
        ],
        "134543796": [
            "HTTP_ACCEPT_ENCODING",
            []
        ],
        "134543817": [
            "HTTP_ACCEPT_LANGUAGE",
            []
        ],
        "134543838": [
            "HTTP_AUTHORIZATION",
            []
        ],
        "134543857": [
            "HTTP_CONNECTION",
            []
        ],
        "134543873": [
            "HTTP_COOKIE",
            []
        ],
        "134543885": [
            "HTTP_HOST",
            []
        ],
        "134543895": [
            "HTTP_REFERER",
            []
        ],
        "134543908": [
            "HTTP_USER_AGENT",
            []
        ],
        "134543924": [
            "HTTP_X_HTTP_METHOD_OVERRIDE",
            []
        ],
        "134543952": [
            "CONTENT_TYPE",
            []
        ],
        "134543965": [
            "CONTENT_LENGTH",
            []
        ],
        "134543980": [
            "accept",
            [
                4294967295
            ]
        ],
        "134543987": [
            "accept-charset",
            []
        ],
        "134544002": [
            "accept-encoding",
            []
        ],
        "134544018": [
            "accept-language",
            []
        ],
        "134544034": [
            "cookie",
            []
        ],
        "134544041": [
            "referer",
            []
        ],
        "134544049": [
            "content-type",
            []
        ],
        "134544062": [
            "x-http-method-override",
            []
        ],
        "134544328": [
            "Could not open plugin %s: %s\n",
            [
                134536580
            ]
        ],
        "134544358": [
            "uhttpd_plugin",
            [
                134536580
            ]
        ],
        "134544372": [
            "Could not find symbol '%s' in plugin '%s'\n",
            [
                134536580
            ]
        ],
        "134544460": [
            "Location: %s\r\n\r\n",
            [
                134537041
            ]
        ],
        "134544477": [
            "request",
            [
                4294967295
            ]
        ],
        "134544485": [
            "fallback",
            []
        ],
        "134544494": [
            "redirect",
            [
                4294967295
            ]
        ],
        "134544503": [
            "rewrite",
            [
                4294967295
            ]
        ],
        "134544511": [
            "add-header",
            [
                4294967295
            ]
        ],
        "134544522": [
            "no-cache",
            [
                4294967295
            ]
        ],
        "134545523": [
            ";*2$\",",
            []
        ]
    },
    "imported_function": {
        "134517520": "sub_8049310",
        "134517536": ".json_script_init",
        "134517552": ".strcpy",
        "134517568": ".scandir64",
        "134517584": ".dlerror",
        "134517600": ".printf",
        "134517616": ".uloop_run",
        "134517632": ".strerror",
        "134517648": ".stat64",
        "134517664": ".snprintf",
        "134517680": ".alphasort64",
        "134517696": ".fgets",
        "134517712": ".fcntl64",
        "134517728": ".uloop_done",
        "134517744": ".execl",
        "134517760": ".uloop_fd_add",
        "134517776": ".blob_buf_free",
        "134517792": ".perror",
        "134517808": ".blob_put_raw",
        "134517824": ".puts",
        "134517840": ".dup2",
        "134517856": ".ustream_free",
        "134517872": ".malloc",
        "134517888": ".blob_buf_init",
        "134517904": ".vsnprintf",
        "134517920": ".strtoul",
        "134517936": ".socket",
        "134517952": ".blobmsg_add_json_from_file",
        "134517968": ".realpath",
        "134517984": ".clearenv",
        "134518000": ".strncasecmp",
        "134518016": ".freeaddrinfo",
        "134518032": ".blobmsg_parse",
        "134518048": ".pipe",
        "134518064": ".json_script_file_from_blobmsg",
        "134518080": ".blobmsg_add_field",
        "134518096": ".accept",
        "134518112": ".strrchr",
        "134518128": ".calloc",
        "134518144": ".gai_strerror",
        "134518160": ".write",
        "134518176": ".fprintf",
        "134518192": ".uloop_timeout_cancel",
        "134518208": ".kill",
        "134518224": ".strcat",
        "134518240": ".bind",
        "134518256": ".json_script_run_file",
        "134518272": ".chdir",
        "134518288": ".setsockopt",
        "134518304": ".__calloc_a",
        "134518320": ".strstr",
        "134518336": ".signal",
        "134518352": ".read",
        "134518368": ".getspnam",
        "134518384": ".strncmp",
        "134518400": ".dlopen",
        "134518416": ".uloop_process_add",
        "134518432": ".setenv",
        "134518448": ".strcasecmp",
        "134518464": ".realloc",
        "134518480": ".strtok",
        "134518496": ".listen",
        "134518512": ".crypt",
        "134518528": ".fork",
        "134518544": ".ustream_write",
        "134518560": ".__uClibc_main",
        "134518576": ".dlsym",
        "134518592": ".ustream_get_read_buf",
        "134518608": ".strdup",
        "134518624": ".getopt",
        "134518640": ".ustream_consume",
        "134518656": ".fclose",
        "134518672": ".open64",
        "134518688": ".time",
        "134518704": ".strcmp",
        "134518720": ".uloop_fd_delete",
        "134518736": ".getpwnam",
        "134518752": ".ustream_set_read_blocked",
        "134518768": ".blobmsg_parse_array",
        "134518784": ".timegm",
        "134518800": ".getaddrinfo",
        "134518816": ".ustream_printf",
        "134518832": ".strftime",
        "134518848": ".uloop_timeout_set",
        "134518864": ".ustream_vprintf",
        "134518880": ".strptime",
        "134518896": ".uloop_init",
        "134518912": ".__errno_location",
        "134518928": ".exit",
        "134518944": ".ustream_fd_init",
        "134518960": ".inet_ntop",
        "134518976": ".atoi",
        "134518992": ".gmtime",
        "134519008": ".uloop_process_delete",
        "134519024": ".strchr",
        "134519040": ".fputs",
        "134519056": ".close",
        "134519072": ".free",
        "134519088": ".getsockname",
        "134519104": ".fopen64"
    },
    "exported_function": {
        "134558528": "__ctype_b",
        "134558532": "optarg",
        "134517484": ".init_proc",
        "134538222": ".term_proc",
        "134558536": "stderr",
        "134558544": "__ctype_tolower",
        "134558520": "_edata",
        "134520840": "start"
    }
}